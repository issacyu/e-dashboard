{"ast":null,"code":"import _toConsumableArray from \"C:\\\\Users\\\\issac\\\\Documents\\\\React\\\\e-dashboard\\\\e-dashboard\\\\UI\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/toConsumableArray\";\nexport var getTopFive = function getTopFive(data, key, value) {\n  var map = new Map(); // Build a dictionary with key and value([Coke: 10]). \n\n  data.forEach(function (x) {\n    if (map.has(x[key])) {\n      var val = map.get(x[key]) + x[value];\n      map.set(x[key], val);\n    } else {\n      map.set(x[key], x[value]);\n    }\n  }); // Convert the dictionary into array of objects({Product: Coke, Quantity: 10}).\n\n  return _toConsumableArray(map).map(function (x) {\n    var obj = {};\n    obj[key] = x[0];\n    obj[value] = x[1];\n    return obj;\n  }) // Sort the array by value in decending order.\n  .sort(function (a, b) {\n    return b[value] - a[value];\n  });\n};\nexport var getCompleteVsReturn = function getCompleteVsReturn(data) {\n  var status = [{\n    Status: 'Completed',\n    Number: 0\n  }, {\n    Status: 'Returned',\n    Number: 0\n  }];\n  data.forEach(function (x) {\n    if (x.status === 'Completed') {\n      status[0].Number = status[0].Number + 1;\n    }\n\n    if (x.status === 'Returned') {\n      status[1].Number = status[1].Number + 1;\n    }\n  });\n  return status;\n};\nexport var getSaleAndProfit = function getSaleAndProfit(data) {\n  var today = new Date();\n  var map = new Map();\n\n  for (var i = 0; i < 12; i++) {\n    var monthAndYear = getMonthAndYear(today);\n    map.set(monthAndYear, {\n      Sales: 0,\n      Profit: 0\n    });\n  }\n\n  var _iteratorNormalCompletion = true;\n  var _didIteratorError = false;\n  var _iteratorError = undefined;\n\n  try {\n    for (var _iterator = data[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n      var d = _step.value;\n\n      var _monthAndYear = getMonthAndYear(new Date(d.soldDate));\n\n      if (map.has(_monthAndYear)) {\n        var sale = map.get(_monthAndYear);\n        sale.Sales = sale.Sales + d.soldPrice;\n        sale.netProfit = sale.netProfit + d.netProfit;\n      }\n    }\n  } catch (err) {\n    _didIteratorError = true;\n    _iteratorError = err;\n  } finally {\n    try {\n      if (!_iteratorNormalCompletion && _iterator.return != null) {\n        _iterator.return();\n      }\n    } finally {\n      if (_didIteratorError) {\n        throw _iteratorError;\n      }\n    }\n  }\n\n  console.log(map);\n};\n\nvar getMonthAndYear = function getMonthAndYear(date) {\n  date.setMonth(date.getMonth() - 1);\n  var localDate = date.toLocaleDateString().split('/');\n  return localDate[0] + '/' + localDate[2];\n};","map":{"version":3,"sources":["C:\\Users\\issac\\Documents\\React\\e-dashboard\\e-dashboard\\UI\\src\\components\\Charts\\Utilities.js"],"names":["getTopFive","data","key","value","map","Map","forEach","x","has","val","get","set","obj","sort","a","b","getCompleteVsReturn","status","Status","Number","getSaleAndProfit","today","Date","i","monthAndYear","getMonthAndYear","Sales","Profit","d","soldDate","sale","soldPrice","netProfit","console","log","date","setMonth","getMonth","localDate","toLocaleDateString","split"],"mappings":";AAAA,OAAO,IAAMA,UAAU,GAAG,SAAbA,UAAa,CAACC,IAAD,EAAOC,GAAP,EAAYC,KAAZ,EAAsB;AAC5C,MAAIC,GAAG,GAAG,IAAIC,GAAJ,EAAV,CAD4C,CAE5C;;AACAJ,EAAAA,IAAI,CAACK,OAAL,CAAa,UAAAC,CAAC,EAAI;AACd,QAAGH,GAAG,CAACI,GAAJ,CAAQD,CAAC,CAACL,GAAD,CAAT,CAAH,EAAmB;AACf,UAAMO,GAAG,GAAGL,GAAG,CAACM,GAAJ,CAAQH,CAAC,CAACL,GAAD,CAAT,IAAkBK,CAAC,CAACJ,KAAD,CAA/B;AACAC,MAAAA,GAAG,CAACO,GAAJ,CAAQJ,CAAC,CAACL,GAAD,CAAT,EAAgBO,GAAhB;AACH,KAHD,MAII;AACAL,MAAAA,GAAG,CAACO,GAAJ,CAAQJ,CAAC,CAACL,GAAD,CAAT,EAAgBK,CAAC,CAACJ,KAAD,CAAjB;AACH;AACJ,GARD,EAH4C,CAY5C;;AACA,SAAO,mBAAIC,GAAJ,EAASA,GAAT,CAAa,UAAAG,CAAC,EAAI;AACrB,QAAIK,GAAG,GAAG,EAAV;AACAA,IAAAA,GAAG,CAACV,GAAD,CAAH,GAAWK,CAAC,CAAC,CAAD,CAAZ;AACAK,IAAAA,GAAG,CAACT,KAAD,CAAH,GAAaI,CAAC,CAAC,CAAD,CAAd;AACA,WAAOK,GAAP;AACH,GALM,EAMP;AANO,GAONC,IAPM,CAOD,UAACC,CAAD,EAAIC,CAAJ,EAAU;AACX,WAAOA,CAAC,CAACZ,KAAD,CAAD,GAAWW,CAAC,CAACX,KAAD,CAAnB;AACJ,GATM,CAAP;AAUH,CAvBM;AAyBP,OAAO,IAAMa,mBAAmB,GAAG,SAAtBA,mBAAsB,CAACf,IAAD,EAAU;AACzC,MAAIgB,MAAM,GAAG,CAAC;AAACC,IAAAA,MAAM,EAAE,WAAT;AAAsBC,IAAAA,MAAM,EAAE;AAA9B,GAAD,EAAmC;AAACD,IAAAA,MAAM,EAAE,UAAT;AAAqBC,IAAAA,MAAM,EAAE;AAA7B,GAAnC,CAAb;AACAlB,EAAAA,IAAI,CAACK,OAAL,CAAa,UAAAC,CAAC,EAAI;AACd,QAAGA,CAAC,CAACU,MAAF,KAAa,WAAhB,EAA4B;AACxBA,MAAAA,MAAM,CAAC,CAAD,CAAN,CAAUE,MAAV,GAAmBF,MAAM,CAAC,CAAD,CAAN,CAAUE,MAAV,GAAmB,CAAtC;AACH;;AACD,QAAGZ,CAAC,CAACU,MAAF,KAAa,UAAhB,EAA2B;AACvBA,MAAAA,MAAM,CAAC,CAAD,CAAN,CAAUE,MAAV,GAAmBF,MAAM,CAAC,CAAD,CAAN,CAAUE,MAAV,GAAmB,CAAtC;AACH;AACJ,GAPD;AAQA,SAAOF,MAAP;AACH,CAXM;AAaP,OAAO,IAAMG,gBAAgB,GAAG,SAAnBA,gBAAmB,CAACnB,IAAD,EAAU;AACtC,MAAIoB,KAAK,GAAG,IAAIC,IAAJ,EAAZ;AACA,MAAIlB,GAAG,GAAG,IAAIC,GAAJ,EAAV;;AACA,OAAI,IAAIkB,CAAC,GAAG,CAAZ,EAAeA,CAAC,GAAG,EAAnB,EAAuBA,CAAC,EAAxB,EAA2B;AACvB,QAAMC,YAAY,GAAGC,eAAe,CAACJ,KAAD,CAApC;AACAjB,IAAAA,GAAG,CAACO,GAAJ,CAAQa,YAAR,EAAsB;AAACE,MAAAA,KAAK,EAAE,CAAR;AAAWC,MAAAA,MAAM,EAAE;AAAnB,KAAtB;AACH;;AANqC;AAAA;AAAA;;AAAA;AAOtC,yBAAa1B,IAAb,8HAAkB;AAAA,UAAV2B,CAAU;;AACd,UAAMJ,aAAY,GAAGC,eAAe,CAAC,IAAIH,IAAJ,CAASM,CAAC,CAACC,QAAX,CAAD,CAApC;;AACA,UAAGzB,GAAG,CAACI,GAAJ,CAAQgB,aAAR,CAAH,EAAyB;AACrB,YAAIM,IAAI,GAAG1B,GAAG,CAACM,GAAJ,CAAQc,aAAR,CAAX;AACAM,QAAAA,IAAI,CAACJ,KAAL,GAAaI,IAAI,CAACJ,KAAL,GAAaE,CAAC,CAACG,SAA5B;AACAD,QAAAA,IAAI,CAACE,SAAL,GAAiBF,IAAI,CAACE,SAAL,GAAiBJ,CAAC,CAACI,SAApC;AACH;AACJ;AAdqC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAgBtCC,EAAAA,OAAO,CAACC,GAAR,CAAY9B,GAAZ;AACH,CAjBM;;AAmBP,IAAMqB,eAAe,GAAG,SAAlBA,eAAkB,CAACU,IAAD,EAAU;AAC9BA,EAAAA,IAAI,CAACC,QAAL,CAAcD,IAAI,CAACE,QAAL,KAAkB,CAAhC;AACA,MAAMC,SAAS,GAAGH,IAAI,CAACI,kBAAL,GAA0BC,KAA1B,CAAgC,GAAhC,CAAlB;AACA,SAAOF,SAAS,CAAC,CAAD,CAAT,GAAe,GAAf,GAAqBA,SAAS,CAAC,CAAD,CAArC;AACH,CAJD","sourcesContent":["export const getTopFive = (data, key, value) => {\r\n    let map = new Map();\r\n    // Build a dictionary with key and value([Coke: 10]). \r\n    data.forEach(x => {\r\n        if(map.has(x[key])){\r\n            const val = map.get(x[key]) + x[value];\r\n            map.set(x[key], val);\r\n        }\r\n        else{\r\n            map.set(x[key], x[value]);\r\n        }\r\n    });\r\n    // Convert the dictionary into array of objects({Product: Coke, Quantity: 10}).\r\n    return [...map].map(x => {\r\n        let obj = {};       \r\n        obj[key] = x[0];\r\n        obj[value] = x[1];\r\n        return obj;\r\n    })\r\n    // Sort the array by value in decending order.\r\n    .sort((a, b) => {\r\n         return b[value] - a[value]\r\n    });\r\n}\r\n\r\nexport const getCompleteVsReturn = (data) => {\r\n    let status = [{Status: 'Completed', Number: 0}, {Status: 'Returned', Number: 0}]\r\n    data.forEach(x => {\r\n        if(x.status === 'Completed'){\r\n            status[0].Number = status[0].Number + 1;\r\n        }\r\n        if(x.status === 'Returned'){\r\n            status[1].Number = status[1].Number + 1;\r\n        }\r\n    })\r\n    return status;\r\n}\r\n\r\nexport const getSaleAndProfit = (data) => {\r\n    let today = new Date();\r\n    let map = new Map();\r\n    for(let i = 0; i < 12; i++){\r\n        const monthAndYear = getMonthAndYear(today);\r\n        map.set(monthAndYear, {Sales: 0, Profit: 0});\r\n    }\r\n    for(let d of data){\r\n        const monthAndYear = getMonthAndYear(new Date(d.soldDate));\r\n        if(map.has(monthAndYear)){\r\n            let sale = map.get(monthAndYear);\r\n            sale.Sales = sale.Sales + d.soldPrice;\r\n            sale.netProfit = sale.netProfit + d.netProfit;\r\n        }\r\n    }\r\n\r\n    console.log(map);\r\n}\r\n\r\nconst getMonthAndYear = (date) => {\r\n    date.setMonth(date.getMonth() - 1);\r\n    const localDate = date.toLocaleDateString().split('/');\r\n    return localDate[0] + '/' + localDate[2]\r\n}"]},"metadata":{},"sourceType":"module"}