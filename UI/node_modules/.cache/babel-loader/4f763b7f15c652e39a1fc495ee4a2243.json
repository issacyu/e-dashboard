{"ast":null,"code":"import _toConsumableArray from \"C:\\\\Users\\\\issac\\\\Documents\\\\React\\\\simple-dashboard\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/toConsumableArray\";\nimport _classCallCheck from \"C:\\\\Users\\\\issac\\\\Documents\\\\React\\\\simple-dashboard\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"C:\\\\Users\\\\issac\\\\Documents\\\\React\\\\simple-dashboard\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"C:\\\\Users\\\\issac\\\\Documents\\\\React\\\\simple-dashboard\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"C:\\\\Users\\\\issac\\\\Documents\\\\React\\\\simple-dashboard\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"C:\\\\Users\\\\issac\\\\Documents\\\\React\\\\simple-dashboard\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";\nimport _objectSpread from \"C:\\\\Users\\\\issac\\\\Documents\\\\React\\\\simple-dashboard\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/objectSpread\";\n\nvar _this = this,\n    _jsxFileName = \"C:\\\\Users\\\\issac\\\\Documents\\\\React\\\\simple-dashboard\\\\src\\\\components\\\\Table\\\\DataGrid\\\\DataGrid.js\";\n\nimport React, { Component } from 'react';\nimport { Panel, Button } from 'react-bootstrap';\nimport ReactTable from 'react-table';\nimport checkboxHOC from \"react-table/lib/hoc/selectTable\";\nimport 'react-table/react-table.css';\nvar CheckboxTable = checkboxHOC(ReactTable);\n\nvar getData = function getData() {\n  var data = _this.props.data.map(function (item) {\n    var _id = _this.state.id;\n    console.log('id from getdata: ' + _id);\n    return _objectSpread({\n      _id: _id\n    }, item);\n  });\n\n  return data;\n};\n\nvar DataGrid =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(DataGrid, _Component);\n\n  function DataGrid() {\n    var _getPrototypeOf2;\n\n    var _this2;\n\n    _classCallCheck(this, DataGrid);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this2 = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(DataGrid)).call.apply(_getPrototypeOf2, [this].concat(args)));\n    _this2.state = {\n      id: 0,\n      selection: [],\n      selectAll: false,\n      data: function data() {//  getData() \n      }\n    };\n\n    _this2.toggleSelection = function (key, shift, row) {\n      var selection = _toConsumableArray(_this2.state.selection);\n\n      var keyIndex = selection.indexOf(key);\n      var data = _this2.state.data;\n\n      if (keyIndex > 0) {\n        selection = [].concat(_toConsumableArray(selection.slice(0, keyIndex)), _toConsumableArray(selection.slice(keyIndex + 1)));\n      } else {\n        selection.push(key);\n      }\n    };\n\n    _this2.toggleAll = function () {\n      /*\r\n        'toggleAll' is a tricky concept with any filterable table\r\n        do you just select ALL the records that are in your data?\r\n        OR\r\n        do you only select ALL the records that are in the current filtered data?\r\n        \r\n        The latter makes more sense because 'selection' is a visual thing for the user.\r\n        This is especially true if you are going to implement a set of external functions\r\n        that act on the selected information (you would not want to DELETE the wrong thing!).\r\n        \r\n        So, to that end, access to the internals of ReactTable are required to get what is\r\n        currently visible in the table (either on the current page or any other page).\r\n        \r\n        The HOC provides a method call 'getWrappedInstance' to get a ref to the wrapped\r\n        ReactTable and then get the internal state and the 'sortedData'. \r\n        That can then be iterrated to get all the currently visible records and set\r\n        the selection state.\r\n      */\n      var selectAll = _this2.state.selectAll ? false : true;\n      var selection = [];\n\n      if (selectAll) {\n        // we need to get at the internals of ReactTable\n        var wrappedInstance = _this2.checkboxTable.getWrappedInstance(); // the 'sortedData' property contains the currently accessible records based on the filter and sort\n\n\n        var currentRecords = wrappedInstance.getResolvedState().sortedData; // we just push all the IDs onto the selection array\n\n        currentRecords.forEach(function (item) {\n          selection.push(item._original._id);\n        });\n      }\n\n      _this2.setState({\n        selectAll: selectAll,\n        selection: selection\n      });\n    };\n\n    _this2.isSelected = function (key) {\n      /*\r\n        Instead of passing our external selection state we provide an 'isSelected'\r\n        callback and detect the selection state ourselves. This allows any implementation\r\n        for selection (either an array, object keys, or even a Javascript Set object).\r\n      */\n      return _this2.state.selection.includes(key);\n    };\n\n    _this2.logSelection = function () {\n      console.log(\"selection:\", _this2.state.selection);\n    };\n\n    return _this2;\n  }\n\n  _createClass(DataGrid, [{\n    key: \"render\",\n    value: function render() {\n      var _this3 = this;\n\n      var toggleSelection = this.toggleSelection,\n          toggleAll = this.toggleAll,\n          isSelected = this.isSelected,\n          logSelection = this.logSelection;\n      var _this$state = this.state,\n          data = _this$state.data,\n          columns = _this$state.columns,\n          selectAll = _this$state.selectAll;\n      var checkboxProps = {//   selectAll,\n        //   isSelected,\n        //   toggleSelection,\n        //   toggleAll,\n        //   selectType: \"checkbox\",\n        //   getTrProps: (s, r) => {\n        //     // someone asked for an example of a background color change\n        //     // here it is...\n        //     let selected;\n        //     if(typeof r.original._id !== 'undefined') {\n        //         selected = this.isSelected(r.original._id);\n        //     }\n        //     return {\n        //       style: {\n        //         backgroundColor: selected ? \"lightgreen\" : \"inherit\"\n        //         // color: selected ? 'white' : 'inherit',\n        //       }\n        //     };\n        //   }\n      };\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 123\n        },\n        __self: this\n      }, React.createElement(Panel, {\n        bsStyle: \"primary\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 124\n        },\n        __self: this\n      }, React.createElement(Panel.Heading, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 125\n        },\n        __self: this\n      }, this.props.title), React.createElement(Panel.Body, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 128\n        },\n        __self: this\n      }, React.createElement(CheckboxTable, Object.assign({\n        className: \"-striped -highlight\",\n        defaultPageSize: 10,\n        ref: function ref(r) {\n          return _this3.checkboxTable = r;\n        },\n        data: this.state.data,\n        columns: this.props.columns\n      }, checkboxProps, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 129\n        },\n        __self: this\n      }))), React.createElement(Panel.Footer, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 138\n        },\n        __self: this\n      }, React.createElement(Button, {\n        onClick: this.props.clicked,\n        bsStyle: \"primary\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 139\n        },\n        __self: this\n      }, \"Save\"), React.createElement(Button, {\n        bsStyle: \"danger\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 140\n        },\n        __self: this\n      }, \"Delete\"))));\n    }\n  }]);\n\n  return DataGrid;\n}(Component);\n\nexport default DataGrid;","map":{"version":3,"sources":["C:\\Users\\issac\\Documents\\React\\simple-dashboard\\src\\components\\Table\\DataGrid\\DataGrid.js"],"names":["React","Component","Panel","Button","ReactTable","checkboxHOC","CheckboxTable","getData","data","props","map","item","_id","state","id","console","log","DataGrid","selection","selectAll","toggleSelection","key","shift","row","keyIndex","indexOf","slice","push","toggleAll","wrappedInstance","checkboxTable","getWrappedInstance","currentRecords","getResolvedState","sortedData","forEach","_original","setState","isSelected","includes","logSelection","columns","checkboxProps","title","r","clicked"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\r\n\r\nimport { Panel, Button } from 'react-bootstrap';\r\nimport ReactTable from 'react-table';\r\nimport checkboxHOC from \"react-table/lib/hoc/selectTable\";\r\n\r\nimport 'react-table/react-table.css';\r\n\r\nconst CheckboxTable = checkboxHOC(ReactTable);\r\n\r\nconst getData = () => {\r\n    const data = this.props.data.map(item => {\r\n        const _id = this.state.id;\r\n        console.log('id from getdata: ' + _id)\r\n        return{\r\n            _id,\r\n            ...item\r\n        }\r\n    });\r\n\r\n    return data;\r\n};\r\n\r\nclass DataGrid extends Component {\r\n    state = {\r\n        id: 0,\r\n        selection: [],\r\n        selectAll: false,\r\n        data: () => { \r\n            //  getData() \r\n        }\r\n    };\r\n\r\n    toggleSelection = (key, shift, row) => {\r\n        let selection = [...this.state.selection];\r\n        const keyIndex = selection.indexOf(key);\r\n        const data = this.state.data;\r\n        if(keyIndex > 0) {\r\n            selection = [\r\n                ...selection.slice(0, keyIndex),\r\n                ...selection.slice(keyIndex + 1)\r\n            ]\r\n        }\r\n        else {\r\n            selection.push(key);\r\n        }\r\n    };\r\n\r\n    toggleAll = () => {\r\n        /*\r\n          'toggleAll' is a tricky concept with any filterable table\r\n          do you just select ALL the records that are in your data?\r\n          OR\r\n          do you only select ALL the records that are in the current filtered data?\r\n          \r\n          The latter makes more sense because 'selection' is a visual thing for the user.\r\n          This is especially true if you are going to implement a set of external functions\r\n          that act on the selected information (you would not want to DELETE the wrong thing!).\r\n          \r\n          So, to that end, access to the internals of ReactTable are required to get what is\r\n          currently visible in the table (either on the current page or any other page).\r\n          \r\n          The HOC provides a method call 'getWrappedInstance' to get a ref to the wrapped\r\n          ReactTable and then get the internal state and the 'sortedData'. \r\n          That can then be iterrated to get all the currently visible records and set\r\n          the selection state.\r\n        */\r\n        const selectAll = this.state.selectAll ? false : true;\r\n        const selection = [];\r\n        if (selectAll) {\r\n          // we need to get at the internals of ReactTable\r\n          const wrappedInstance = this.checkboxTable.getWrappedInstance();\r\n          // the 'sortedData' property contains the currently accessible records based on the filter and sort\r\n          const currentRecords = wrappedInstance.getResolvedState().sortedData;\r\n          // we just push all the IDs onto the selection array\r\n          currentRecords.forEach(item => {\r\n            selection.push(item._original._id);\r\n          });\r\n        }\r\n        this.setState({ selectAll, selection });\r\n      };\r\n\r\n      isSelected = key => {\r\n        /*\r\n          Instead of passing our external selection state we provide an 'isSelected'\r\n          callback and detect the selection state ourselves. This allows any implementation\r\n          for selection (either an array, object keys, or even a Javascript Set object).\r\n        */\r\n        return this.state.selection.includes(key);\r\n      };\r\n\r\n      logSelection = () => {\r\n        console.log(\"selection:\", this.state.selection);\r\n      };\r\n\r\n    render(){\r\n        const { toggleSelection, toggleAll, isSelected, logSelection } = this;\r\n        const { data, columns, selectAll } = this.state;\r\n    \r\n        const checkboxProps = {\r\n        //   selectAll,\r\n        //   isSelected,\r\n        //   toggleSelection,\r\n        //   toggleAll,\r\n        //   selectType: \"checkbox\",\r\n        //   getTrProps: (s, r) => {\r\n        //     // someone asked for an example of a background color change\r\n        //     // here it is...\r\n        //     let selected;\r\n        //     if(typeof r.original._id !== 'undefined') {\r\n        //         selected = this.isSelected(r.original._id);\r\n        //     }\r\n        //     return {\r\n        //       style: {\r\n        //         backgroundColor: selected ? \"lightgreen\" : \"inherit\"\r\n        //         // color: selected ? 'white' : 'inherit',\r\n        //       }\r\n        //     };\r\n        //   }\r\n        };\r\n\r\n        return(\r\n            <div>\r\n                <Panel bsStyle='primary'>\r\n                    <Panel.Heading>\r\n                        {this.props.title}\r\n                    </Panel.Heading>\r\n                    <Panel.Body>\r\n                      <CheckboxTable\r\n                          className=\"-striped -highlight\"\r\n                          defaultPageSize={10}\r\n                          ref={r => (this.checkboxTable = r)}\r\n                          data={this.state.data}\r\n                          columns={this.props.columns}\r\n                          {...checkboxProps}\r\n                      />\r\n                    </Panel.Body>\r\n                    <Panel.Footer>\r\n                        <Button onClick={this.props.clicked} bsStyle='primary'>Save</Button>\r\n                        <Button bsStyle='danger'>Delete</Button>\r\n                    </Panel.Footer>\r\n                </Panel>\r\n            </div>\r\n        )\r\n    };\r\n}\r\n\r\nexport default DataGrid;"]},"metadata":{},"sourceType":"module"}