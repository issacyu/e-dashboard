{"ast":null,"code":"import _toConsumableArray from \"C:\\\\Users\\\\issac\\\\Documents\\\\React\\\\e-dashboard\\\\e-dashboard\\\\UI\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/toConsumableArray\";\nimport _classCallCheck from \"C:\\\\Users\\\\issac\\\\Documents\\\\React\\\\e-dashboard\\\\e-dashboard\\\\UI\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"C:\\\\Users\\\\issac\\\\Documents\\\\React\\\\e-dashboard\\\\e-dashboard\\\\UI\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"C:\\\\Users\\\\issac\\\\Documents\\\\React\\\\e-dashboard\\\\e-dashboard\\\\UI\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"C:\\\\Users\\\\issac\\\\Documents\\\\React\\\\e-dashboard\\\\e-dashboard\\\\UI\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"C:\\\\Users\\\\issac\\\\Documents\\\\React\\\\e-dashboard\\\\e-dashboard\\\\UI\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"C:\\\\Users\\\\issac\\\\Documents\\\\React\\\\e-dashboard\\\\e-dashboard\\\\UI\\\\src\\\\containers\\\\Inventory\\\\Inventory.js\";\nimport React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { Row, Col } from 'react-bootstrap';\nimport * as JsonPatch from 'fast-json-patch';\nimport * as actions from '../../store/actions/inventory';\nimport DataGrid from '../../components/Table/DataGrid/DataGrid';\nimport PieChart from '../../components/Charts/PieChart';\nimport Alert from '../../components/Alert/Alert';\nimport * as GridColumns from '../../components/Table/GridColumns/GridColumns';\nimport WithGridFunction from '../../hoc/WithGridFunction/WithGridFunction';\nimport EmptyRow from '../../components/Table/GridRows/GridRow';\nimport InventoryPanelGroup from '../../components/Panel/InventoryPanelGroup';\nimport LineChart from '../../components/Charts/LineChart';\n\nvar Inventory =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(Inventory, _Component);\n\n  function Inventory() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, Inventory);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(Inventory)).call.apply(_getPrototypeOf2, [this].concat(args)));\n    _this.state = {\n      manufacturerData: [{\n        manufacturer: 'Apple',\n        name: 'Steve Job',\n        phone: '123-456-7890',\n        email: '123@gmail.com',\n        address: '123th St New York NY 10012'\n      }, {\n        manufacturer: 'Apple',\n        name: 'Steve Job',\n        phone: '123-456-7890',\n        email: '123@gmail.com',\n        address: '123th St New York NY 10012'\n      }, {\n        manufacturer: 'Apple',\n        name: 'Steve Job',\n        phone: '123-456-7890',\n        email: '123@gmail.com',\n        address: '123th St New York NY 10012'\n      }],\n      inventoryData: [],\n      origInventoryData: []\n    };\n\n    _this.onSaveInventoryData = function () {\n      var patchDoc = JsonPatch.compare(_this.state.origInventoryData, _this.state.inventoryData);\n\n      _this.props.onSaveInventoryData(patchDoc, _this.state.inventoryData);\n\n      _this.setState({\n        origInventoryData: JSON.parse(JSON.stringify(_this.state.inventoryData))\n      });\n    };\n\n    _this.onManufacturerRenderEditableCellHandler = function (cellInfo) {\n      return React.createElement(\"div\", {\n        style: {\n          backgroundColor: \"#fafafa\"\n        },\n        contentEditable: true,\n        suppressContentEditableWarning: true,\n        onBlur: function onBlur(e) {\n          var data = _toConsumableArray(_this.state.manufacturerData);\n\n          data[cellInfo.index][cellInfo.column.id] = e.target.innerHTML;\n\n          _this.setState({\n            manufacturerData: _toConsumableArray(data)\n          });\n        },\n        dangerouslySetInnerHTML: {\n          __html: _this.state.manufacturerData[cellInfo.index][cellInfo.column.id]\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 81\n        },\n        __self: this\n      });\n    };\n\n    _this.onInventoryRenderEditableCellHandler = function (cellInfo) {\n      // Avoid exception! We don't want to modify an empty array.\n      if (_this.state.inventoryData.length !== 0) {\n        return React.createElement(\"div\", {\n          style: {\n            backgroundColor: \"#fafafa\"\n          },\n          contentEditable: true,\n          suppressContentEditableWarning: true,\n          onBlur: function onBlur(e) {\n            var data = _toConsumableArray(_this.state.inventoryData);\n\n            data[cellInfo.index][cellInfo.column.id] = e.target.innerHTML;\n\n            _this.setState({\n              inventoryData: data\n            });\n          },\n          dangerouslySetInnerHTML: {\n            __html: _this.state.inventoryData[cellInfo.index][cellInfo.column.id]\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 101\n          },\n          __self: this\n        });\n      }\n    };\n\n    return _this;\n  }\n\n  _createClass(Inventory, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      this.props.onFetchInventoryData();\n    }\n  }, {\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate(prevProps) {\n      // For the initial load.\n      if (this.props.inventoryData !== prevProps.inventoryData) {\n        var gridData = this.props.inventoryData;\n        this.setState({\n          inventoryData: JSON.parse(JSON.stringify(gridData)),\n          origInventoryData: JSON.parse(JSON.stringify(gridData))\n        }); // Assign data to HOC state.\n\n        this.props.setData(gridData);\n      } // When add or remove data from grid, we want to assign new data to the state.\n      // The this.props.data is from HOC.\n\n\n      if (this.props.data !== prevProps.data) {\n        this.setState({\n          inventoryData: JSON.parse(JSON.stringify(this.props.data))\n        });\n      }\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var alert;\n      var lowStockItem = this.state.inventoryData.filter(function (i) {\n        return i.quantity < 10;\n      });\n\n      if (lowStockItem.length > 0) {\n        alert = React.createElement(Row, {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 123\n          },\n          __self: this\n        }, React.createElement(Col, {\n          md: 12,\n          lg: 12,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 124\n          },\n          __self: this\n        }, React.createElement(Alert, {\n          title: \"Low Stock Warning\",\n          messages: lowStockItem.map(function (i) {\n            return i.product;\n          }),\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 125\n          },\n          __self: this\n        })));\n      }\n\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 131\n        },\n        __self: this\n      }, alert, React.createElement(InventoryPanelGroup, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 133\n        },\n        __self: this\n      }), React.createElement(Row, {\n        className: \"show-grid\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 134\n        },\n        __self: this\n      }, React.createElement(Col, {\n        md: 4,\n        lg: 4,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 135\n        },\n        __self: this\n      }, React.createElement(PieChart, {\n        bsStyle: \"primary\",\n        title: \"Category\",\n        width: 800,\n        height: 300,\n        cx: 220,\n        cy: 100,\n        outerRadius: 130,\n        fill: \"#8884d8\",\n        displayKey: \"category\",\n        displayValue: \"totalCost\",\n        displayData: this.props.inventoryData,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 136\n        },\n        __self: this\n      })), React.createElement(Row, {\n        className: \"show-grid\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 150\n        },\n        __self: this\n      }, React.createElement(Col, {\n        md: 12,\n        lg: 12,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 151\n        },\n        __self: this\n      }, React.createElement(LineChart, {\n        data: this.state.saleAndProfit,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 152\n        },\n        __self: this\n      })))), React.createElement(Row, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 168\n        },\n        __self: this\n      }, React.createElement(Col, {\n        md: 12,\n        lg: 12,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 169\n        },\n        __self: this\n      }, React.createElement(DataGrid //The key uses to notify the child component to re-render.\n      , {\n        key: this.state.inventoryData,\n        data: this.state.inventoryData,\n        emptyRow: EmptyRow('INVENTORY'),\n        title: \"Inventory\",\n        columns: GridColumns.INVENTORY_COLUMNS(this.onInventoryRenderEditableCellHandler),\n        onSaveHandler: this.onSaveInventoryData,\n        checkboxProps: this.props.checkboxProps,\n        disableDeleteButton: this.props.disableDeleteButton,\n        onDeleteRowHandler: this.props.onDeleteRowHandler,\n        onAddRowHandler: this.props.onAddRowHandler,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 170\n        },\n        __self: this\n      }))));\n    }\n  }]);\n\n  return Inventory;\n}(Component);\n\nvar mapStateToProps = function mapStateToProps(state) {\n  return {\n    inventoryData: state.inventory.inventoryData\n  };\n};\n\nvar mapDispatchToProps = function mapDispatchToProps(dispatch) {\n  return {\n    onFetchInventoryData: function onFetchInventoryData() {\n      return dispatch(actions.fetchInventoryData());\n    },\n    onSaveInventoryData: function onSaveInventoryData(patchDoc, inventoryData) {\n      return dispatch(actions.saveInventoryData(patchDoc, inventoryData));\n    }\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(WithGridFunction(Inventory));","map":{"version":3,"sources":["C:\\Users\\issac\\Documents\\React\\e-dashboard\\e-dashboard\\UI\\src\\containers\\Inventory\\Inventory.js"],"names":["React","Component","connect","Row","Col","JsonPatch","actions","DataGrid","PieChart","Alert","GridColumns","WithGridFunction","EmptyRow","InventoryPanelGroup","LineChart","Inventory","state","manufacturerData","manufacturer","name","phone","email","address","inventoryData","origInventoryData","onSaveInventoryData","patchDoc","compare","props","setState","JSON","parse","stringify","onManufacturerRenderEditableCellHandler","cellInfo","backgroundColor","e","data","index","column","id","target","innerHTML","__html","onInventoryRenderEditableCellHandler","length","onFetchInventoryData","prevProps","gridData","setData","alert","lowStockItem","filter","i","quantity","map","product","saleAndProfit","INVENTORY_COLUMNS","checkboxProps","disableDeleteButton","onDeleteRowHandler","onAddRowHandler","mapStateToProps","inventory","mapDispatchToProps","dispatch","fetchInventoryData","saveInventoryData"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { Row, Col } from 'react-bootstrap';\r\nimport * as JsonPatch from 'fast-json-patch';\r\nimport * as actions from '../../store/actions/inventory'\r\n\r\nimport DataGrid from '../../components/Table/DataGrid/DataGrid';\r\nimport PieChart from '../../components/Charts/PieChart';\r\nimport Alert from '../../components/Alert/Alert';\r\nimport * as GridColumns from '../../components/Table/GridColumns/GridColumns';\r\nimport WithGridFunction from '../../hoc/WithGridFunction/WithGridFunction';\r\nimport EmptyRow from '../../components/Table/GridRows/GridRow';\r\nimport InventoryPanelGroup from '../../components/Panel/InventoryPanelGroup';\r\nimport LineChart from '../../components/Charts/LineChart';\r\n\r\n\r\nclass Inventory extends Component {\r\n\r\n    state = {\r\n        manufacturerData: \r\n        [\r\n            {\r\n                manufacturer: 'Apple',\r\n                name: 'Steve Job',\r\n                phone: '123-456-7890',\r\n                email: '123@gmail.com',\r\n                address: '123th St New York NY 10012'\r\n            },\r\n            {\r\n                manufacturer: 'Apple',\r\n                name: 'Steve Job',\r\n                phone: '123-456-7890',\r\n                email: '123@gmail.com',\r\n                address: '123th St New York NY 10012'\r\n            },\r\n            {\r\n                manufacturer: 'Apple',\r\n                name: 'Steve Job',\r\n                phone: '123-456-7890',\r\n                email: '123@gmail.com',\r\n                address: '123th St New York NY 10012'\r\n            }\r\n        ],\r\n\r\n        inventoryData: [],\r\n        origInventoryData: []\r\n    };\r\n\r\n    componentDidMount() {\r\n        this.props.onFetchInventoryData();\r\n    }\r\n\r\n    componentDidUpdate(prevProps) {\r\n        // For the initial load.\r\n        if(this.props.inventoryData !== prevProps.inventoryData) {\r\n            const gridData = this.props.inventoryData;\r\n            this.setState({\r\n                inventoryData: JSON.parse(JSON.stringify(gridData)),\r\n                origInventoryData: JSON.parse(JSON.stringify(gridData))\r\n            })\r\n            // Assign data to HOC state.\r\n            this.props.setData(gridData);\r\n        }\r\n        // When add or remove data from grid, we want to assign new data to the state.\r\n        // The this.props.data is from HOC.\r\n        if(this.props.data !== prevProps.data){\r\n            this.setState({\r\n                inventoryData: JSON.parse(JSON.stringify(this.props.data))\r\n            })\r\n        }\r\n    }\r\n\r\n    onSaveInventoryData = () => {\r\n        const patchDoc = JsonPatch.compare(this.state.origInventoryData, this.state.inventoryData);\r\n        this.props.onSaveInventoryData(patchDoc, this.state.inventoryData);\r\n        this.setState({origInventoryData: JSON.parse(JSON.stringify(this.state.inventoryData))});\r\n    }\r\n\r\n    onManufacturerRenderEditableCellHandler = (cellInfo) =>{\r\n        return (\r\n            <div\r\n                style={{ backgroundColor: \"#fafafa\" }}\r\n                contentEditable\r\n                suppressContentEditableWarning\r\n                onBlur={e => {\r\n                    const data = [...this.state.manufacturerData];\r\n                    data[cellInfo.index][cellInfo.column.id] = e.target.innerHTML;\r\n                    this.setState({ manufacturerData: [...data] });\r\n                }}                \r\n                dangerouslySetInnerHTML={{\r\n                    __html: this.state.manufacturerData[cellInfo.index][cellInfo.column.id]\r\n                }}\r\n          />\r\n        )\r\n    };\r\n\r\n    onInventoryRenderEditableCellHandler = (cellInfo) =>{\r\n        // Avoid exception! We don't want to modify an empty array.\r\n        if(this.state.inventoryData.length !== 0) {\r\n            return (\r\n                <div\r\n                    style={{ backgroundColor: \"#fafafa\" }}\r\n                    contentEditable\r\n                    suppressContentEditableWarning\r\n                    onBlur={e => {\r\n                        const data = [...this.state.inventoryData];\r\n                        data[cellInfo.index][cellInfo.column.id] = e.target.innerHTML;\r\n                        this.setState({ inventoryData: data });\r\n                    }}\r\n                    dangerouslySetInnerHTML={{\r\n                        __html: this.state.inventoryData[cellInfo.index][cellInfo.column.id]\r\n                    }}\r\n                />\r\n            );\r\n        }\r\n    };\r\n\r\n    render(){\r\n        let alert;\r\n        const lowStockItem = this.state.inventoryData.filter(i => i.quantity < 10)\r\n        if(lowStockItem.length > 0) {\r\n            alert = \r\n                <Row>\r\n                    <Col md={12} lg={12}>   \r\n                        <Alert title='Low Stock Warning' messages={lowStockItem.map(i => i.product)}/>\r\n                    </Col>\r\n                </Row>\r\n        }\r\n\r\n        return(\r\n            <div>    \r\n                {alert}\r\n                <InventoryPanelGroup />\r\n                <Row className=\"show-grid\">\r\n                    <Col md={4} lg={4}>\r\n                        <PieChart \r\n                            bsStyle='primary'\r\n                            title='Category'\r\n                            width={800}\r\n                            height={300}\r\n                            cx={220}\r\n                            cy={100}\r\n                            outerRadius={130}\r\n                            fill='#8884d8'\r\n                            displayKey='category'\r\n                            displayValue='totalCost'\r\n                            displayData={this.props.inventoryData}\r\n                        />\r\n                    </Col>\r\n                <Row className=\"show-grid\">\r\n                    <Col md={12} lg={12}>\r\n                        <LineChart \r\n                            data={this.state.saleAndProfit}\r\n                        />\r\n                    </Col>\r\n                </Row>\r\n                </Row>\r\n                {/* <Row>\r\n                    <Col md={12} lg={12}>\r\n                        <DataGrid \r\n                            data={this.state.manufacturerData} \r\n                            title='Manufacturer'\r\n                            columns={ManufacturerColumns(this.onManufacturerRenderEditableCellHandler)}\r\n                            emptyRow={EmptyRow('MANUFACTURER')}\r\n                        />\r\n                    </Col>\r\n                </Row> */}\r\n                <Row>\r\n                    <Col md={12} lg={12}>\r\n                        <DataGrid \r\n                            //The key uses to notify the child component to re-render.\r\n                            key={this.state.inventoryData}\r\n                            data={this.state.inventoryData} \r\n                            emptyRow={EmptyRow('INVENTORY')}\r\n                            title='Inventory'\r\n                            columns={GridColumns.INVENTORY_COLUMNS(this.onInventoryRenderEditableCellHandler)}\r\n                            onSaveHandler={this.onSaveInventoryData}\r\n                            checkboxProps={this.props.checkboxProps}\r\n                            disableDeleteButton={this.props.disableDeleteButton}\r\n                            onDeleteRowHandler={this.props.onDeleteRowHandler}\r\n                            onAddRowHandler={this.props.onAddRowHandler}\r\n                        />\r\n                    </Col>\r\n                </Row>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        inventoryData: state.inventory.inventoryData\r\n    }\r\n};\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n    return {\r\n        onFetchInventoryData: () => dispatch(actions.fetchInventoryData()),\r\n        onSaveInventoryData: (patchDoc, inventoryData) => dispatch(actions.saveInventoryData(patchDoc, inventoryData))\r\n    };\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(WithGridFunction(Inventory));"]},"metadata":{},"sourceType":"module"}