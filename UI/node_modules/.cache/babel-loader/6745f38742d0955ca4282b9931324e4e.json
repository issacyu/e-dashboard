{"ast":null,"code":"import _toConsumableArray from \"C:\\\\Users\\\\issac\\\\Documents\\\\React\\\\simple-dashboard\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/toConsumableArray\";\nimport _classCallCheck from \"C:\\\\Users\\\\issac\\\\Documents\\\\React\\\\simple-dashboard\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"C:\\\\Users\\\\issac\\\\Documents\\\\React\\\\simple-dashboard\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"C:\\\\Users\\\\issac\\\\Documents\\\\React\\\\simple-dashboard\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"C:\\\\Users\\\\issac\\\\Documents\\\\React\\\\simple-dashboard\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"C:\\\\Users\\\\issac\\\\Documents\\\\React\\\\simple-dashboard\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"C:\\\\Users\\\\issac\\\\Documents\\\\React\\\\simple-dashboard\\\\src\\\\containers\\\\Overview\\\\Overview.js\";\nimport React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport * as actions from '../../store/actions/overview';\nimport Card from '../../components/Card/Card';\nimport { Row, Col, Panel } from 'react-bootstrap';\nimport BarChart from '../../components/Charts/BarChart';\nimport LineChart from '../../components/Charts/LineChart';\nimport PieChart from '../../components/Charts/PieChart';\nimport DataGrid from '../../components/Table/DataGrid/DataGrid';\nimport salesTrackerColumns from '../../components/Table/GridColumns/SalesTrackerColumns';\n\nvar Overview =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(Overview, _Component);\n\n  function Overview() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, Overview);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(Overview)).call.apply(_getPrototypeOf2, [this].concat(args)));\n    _this.state = {\n      salesData: []\n    };\n\n    _this.onSalesRenderEditableCellHandler = function (cellInfo) {\n      // Avoid exception! We don't want to modify an empty array.\n      if (_this.state.salesData.length !== 0) {\n        return React.createElement(\"div\", {\n          style: {\n            backgroundColor: \"#fafafa\"\n          },\n          contentEditable: true,\n          suppressContentEditableWarning: true,\n          onBlur: function onBlur(e) {\n            var data = _toConsumableArray(_this.state.salesData);\n\n            data[cellInfo.index][cellInfo.column.id] = e.target.innerHTML;\n\n            _this.setState({\n              salesData: data\n            });\n          },\n          dangerouslySetInnerHTML: {\n            __html: _this.state.salesData[cellInfo.index][cellInfo.column.id]\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 33\n          },\n          __self: this\n        });\n      }\n    };\n\n    _this.onSaveHandler = function () {\n      var newOverviewData = _toConsumableArray(_this.state.salesData);\n\n      _this.props.onSaveOverviewData(newOverviewData);\n    };\n\n    return _this;\n  }\n\n  _createClass(Overview, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      this.props.onFetchOverviewData();\n    }\n  }, {\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate(prevProps) {\n      if (this.props.overviewData !== prevProps.overviewData) {\n        this.setState({\n          salesData: this.props.overviewData\n        });\n      }\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 57\n        },\n        __self: this\n      }, React.createElement(Row, {\n        className: \"show-grid text-center\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 58\n        },\n        __self: this\n      }, React.createElement(Col, {\n        md: 4,\n        lg: 4,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 63\n        },\n        __self: this\n      }, React.createElement(Panel, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 64\n        },\n        __self: this\n      }, React.createElement(Row, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 65\n        },\n        __self: this\n      }, \"1\"), React.createElement(Row, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 66\n        },\n        __self: this\n      }, \"2\"), React.createElement(Row, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 67\n        },\n        __self: this\n      }, \"3\"), React.createElement(Row, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 68\n        },\n        __self: this\n      }, \"4\"))), React.createElement(Col, {\n        md: 3,\n        lg: 3,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 72\n        },\n        __self: this\n      }, React.createElement(LineChart, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 73\n        },\n        __self: this\n      }))), React.createElement(Row, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 76\n        },\n        __self: this\n      }, React.createElement(Col, {\n        md: 6,\n        lg: 6,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 77\n        },\n        __self: this\n      }, React.createElement(BarChart, {\n        width: 600,\n        height: 300,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 78\n        },\n        __self: this\n      })), React.createElement(Col, {\n        md: 4,\n        lg: 4,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 83\n        },\n        __self: this\n      })), React.createElement(Row, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 95\n        },\n        __self: this\n      }, React.createElement(DataGrid //The key uses to notify the child component to re-render.\n      , {\n        key: this.props.overviewData,\n        data: this.props.overviewData,\n        columns: salesTrackerColumns(this.onSalesRenderEditableCellHandler),\n        onSaveHandler: this.onSaveHandler,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 96\n        },\n        __self: this\n      })));\n    }\n  }]);\n\n  return Overview;\n}(Component);\n\nvar mapStateToProps = function mapStateToProps(state) {\n  return {\n    overviewData: state.overview.overviewData\n  };\n};\n\nvar mapDispatchToProps = function mapDispatchToProps(dispatch) {\n  return {\n    onFetchOverviewData: function onFetchOverviewData() {\n      return dispatch(actions.fetchOverviewData());\n    },\n    onSaveOverviewData: function onSaveOverviewData(newData) {\n      return dispatch(actions.saveOverviewData(newData));\n    }\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Overview);","map":{"version":3,"sources":["C:\\Users\\issac\\Documents\\React\\simple-dashboard\\src\\containers\\Overview\\Overview.js"],"names":["React","Component","connect","actions","Card","Row","Col","Panel","BarChart","LineChart","PieChart","DataGrid","salesTrackerColumns","Overview","state","salesData","onSalesRenderEditableCellHandler","cellInfo","length","backgroundColor","e","data","index","column","id","target","innerHTML","setState","__html","onSaveHandler","newOverviewData","props","onSaveOverviewData","onFetchOverviewData","prevProps","overviewData","mapStateToProps","overview","mapDispatchToProps","dispatch","fetchOverviewData","newData","saveOverviewData"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport * as actions from '../../store/actions/overview'\r\nimport Card from '../../components/Card/Card';\r\nimport { Row, Col, Panel } from 'react-bootstrap';\r\n\r\nimport BarChart from '../../components/Charts/BarChart';\r\nimport LineChart from '../../components/Charts/LineChart';\r\nimport PieChart from '../../components/Charts/PieChart';\r\nimport DataGrid from '../../components/Table/DataGrid/DataGrid';\r\nimport salesTrackerColumns from '../../components/Table/GridColumns/SalesTrackerColumns';\r\n\r\nclass Overview extends Component {\r\n\r\n    state = {\r\n        salesData: []\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.props.onFetchOverviewData();\r\n    }\r\n\r\n    componentDidUpdate(prevProps) {\r\n        if(this.props.overviewData !== prevProps.overviewData) {\r\n            this.setState({salesData: this.props.overviewData})\r\n        }\r\n    }\r\n\r\n    onSalesRenderEditableCellHandler = (cellInfo) => {\r\n        // Avoid exception! We don't want to modify an empty array.\r\n        if(this.state.salesData.length !== 0) {\r\n            return (\r\n                <div\r\n                    style={{ backgroundColor: \"#fafafa\" }}\r\n                    contentEditable\r\n                    suppressContentEditableWarning\r\n                    onBlur={e => {\r\n                        const data = [...this.state.salesData];\r\n                        data[cellInfo.index][cellInfo.column.id] = e.target.innerHTML;\r\n                        this.setState({salesData: data});\r\n                    }}\r\n                    dangerouslySetInnerHTML={{\r\n                        __html: this.state.salesData[cellInfo.index][cellInfo.column.id]\r\n                    }}\r\n                />\r\n            );\r\n        }\r\n    }\r\n\r\n    onSaveHandler = () => {\r\n        const newOverviewData = [...this.state.salesData];\r\n        this.props.onSaveOverviewData(newOverviewData);\r\n    }\r\n\r\n    render(){\r\n        return(\r\n            <div>\r\n                <Row className=\"show-grid text-center\">\r\n                    {/* <Card title='SALES: $71365.98' />\r\n                    <Card title='RENVENUE: $45265.28' />\r\n                    <Card title='ORDER: 64031' />\r\n                    <Card title='RETURN: 235' /> */}\r\n                    <Col md={4} lg={4}>\r\n                        <Panel>\r\n                            <Row>1</Row>\r\n                            <Row>2</Row>\r\n                            <Row>3</Row>\r\n                            <Row>4</Row>\r\n                        </Panel>\r\n                    </Col>\r\n\r\n                    <Col md={3} lg={3}>\r\n                        <LineChart />\r\n                    </Col>\r\n                </Row>\r\n                <Row>\r\n                    <Col md={6} lg={6}>\r\n                        <BarChart \r\n                            width={600}\r\n                            height={300}\r\n                        />\r\n                    </Col>\r\n                    <Col md={4} lg={4}>\r\n                        {/* <PieChart \r\n                            bsStyle='primary'\r\n                            width={800}\r\n                            height={400}\r\n                            cx={300}\r\n                            cy={200}\r\n                            outerRadius={200}\r\n                            fill='#8884d8'\r\n                        /> */}\r\n                    </Col>\r\n                </Row>\r\n                <Row>\r\n                    <DataGrid \r\n                        //The key uses to notify the child component to re-render.\r\n                        key={this.props.overviewData}\r\n                        data={this.props.overviewData}\r\n                        columns={salesTrackerColumns(this.onSalesRenderEditableCellHandler)}\r\n                        onSaveHandler={this.onSaveHandler}\r\n                        />\r\n                </Row>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        overviewData: state.overview.overviewData\r\n    }\r\n};\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n    return {\r\n        onFetchOverviewData: () => dispatch(actions.fetchOverviewData()),\r\n        onSaveOverviewData: (newData) => dispatch(actions.saveOverviewData(newData))\r\n    };\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Overview);"]},"metadata":{},"sourceType":"module"}