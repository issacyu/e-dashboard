{"ast":null,"code":"import _toConsumableArray from \"C:\\\\Users\\\\issac\\\\Documents\\\\React\\\\simple-dashboard\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/toConsumableArray\";\nimport _objectSpread from \"C:\\\\Users\\\\issac\\\\Documents\\\\React\\\\simple-dashboard\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/objectSpread\";\nimport _classCallCheck from \"C:\\\\Users\\\\issac\\\\Documents\\\\React\\\\simple-dashboard\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"C:\\\\Users\\\\issac\\\\Documents\\\\React\\\\simple-dashboard\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"C:\\\\Users\\\\issac\\\\Documents\\\\React\\\\simple-dashboard\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"C:\\\\Users\\\\issac\\\\Documents\\\\React\\\\simple-dashboard\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"C:\\\\Users\\\\issac\\\\Documents\\\\React\\\\simple-dashboard\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"C:\\\\Users\\\\issac\\\\Documents\\\\React\\\\simple-dashboard\\\\src\\\\components\\\\Table\\\\DataGrid\\\\DataGrid.js\";\nimport React, { Component } from 'react';\nimport { Panel, Button } from 'react-bootstrap';\nimport ReactTable from 'react-table';\nimport checkboxHOC from \"react-table/lib/hoc/selectTable\";\nimport 'react-table/react-table.css';\nvar CheckboxTable = checkboxHOC(ReactTable);\n\nvar DataGrid =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(DataGrid, _Component);\n\n  function DataGrid(props) {\n    var _this;\n\n    _classCallCheck(this, DataGrid);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(DataGrid).call(this, props));\n\n    _this.getData = function (data) {\n      // Each data must contains an id \n      // in order to show a checkbox.\n      var id = 0;\n      var dataWithId = data.map(function (item) {\n        id++;\n        return _objectSpread({\n          id: id\n        }, item);\n      });\n      return dataWithId;\n    };\n\n    _this.toggleSelection = function (key, shift, row) {\n      var selection = _toConsumableArray(_this.state.selection);\n\n      var keyIndex = selection.indexOf(key);\n\n      if (keyIndex >= 0) {\n        selection = [].concat(_toConsumableArray(selection.slice(0, keyIndex)), _toConsumableArray(selection.slice(keyIndex + 1)));\n      } else {\n        selection.push(key);\n      }\n\n      _this.setState({\n        selection: _toConsumableArray(selection)\n      });\n    };\n\n    _this.toggleAll = function () {\n      var selectAll = _this.state.selectAll ? false : true;\n      var selection = [];\n\n      if (selectAll) {\n        var wrappedInstance = _this.checkboxTable.getWrappedInstance();\n\n        var currentRecords = wrappedInstance.getResolvedState().sortedData;\n        currentRecords.forEach(function (item) {\n          selection.push(item._original._id);\n        });\n      }\n\n      _this.setState({\n        selectAll: selectAll,\n        selection: selection\n      });\n    };\n\n    _this.isSelected = function (key) {\n      return _this.state.selection.includes(key);\n    };\n\n    _this.state = {\n      id: 0,\n      selection: [],\n      selectAll: false,\n      data: _this.getData(_this.props.data)\n    };\n    return _this;\n  }\n\n  _createClass(DataGrid, [{\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      var toggleSelection = this.toggleSelection,\n          toggleAll = this.toggleAll,\n          isSelected = this.isSelected;\n      var _this$state = this.state,\n          data = _this$state.data,\n          columns = _this$state.columns,\n          selectAll = _this$state.selectAll;\n      var checkboxProps = {\n        selectAll: selectAll,\n        isSelected: isSelected,\n        toggleSelection: toggleSelection,\n        toggleAll: toggleAll,\n        selectType: \"checkbox\" //   getTrProps: (s, r) => {\n        //     const selected = this.isSelected(r.original._id);\n        //     return {\n        //       style: {\n        //         backgroundColor: selected ? \"lightgreen\" : \"inherit\"\n        //       }\n        //     };\n        //   }\n\n      };\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 92\n        },\n        __self: this\n      }, React.createElement(Panel, {\n        bsStyle: \"primary\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 93\n        },\n        __self: this\n      }, React.createElement(Panel.Heading, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 94\n        },\n        __self: this\n      }, this.props.title), React.createElement(Panel.Body, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 97\n        },\n        __self: this\n      }, React.createElement(CheckboxTable, Object.assign({\n        className: \"-striped -highlight\",\n        defaultPageSize: 10,\n        ref: function ref(r) {\n          return _this2.checkboxTable = r;\n        },\n        data: this.state.data,\n        columns: this.props.columns\n      }, checkboxProps, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 98\n        },\n        __self: this\n      }))), React.createElement(Panel.Footer, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 107\n        },\n        __self: this\n      }, React.createElement(Button, {\n        onClick: this.props.clicked,\n        bsStyle: \"primary\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 108\n        },\n        __self: this\n      }, \"Save\"), React.createElement(Button, {\n        bsStyle: \"danger\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 109\n        },\n        __self: this\n      }, \"Delete\"))));\n    }\n  }]);\n\n  return DataGrid;\n}(Component);\n\nexport default DataGrid;","map":{"version":3,"sources":["C:\\Users\\issac\\Documents\\React\\simple-dashboard\\src\\components\\Table\\DataGrid\\DataGrid.js"],"names":["React","Component","Panel","Button","ReactTable","checkboxHOC","CheckboxTable","DataGrid","props","getData","data","id","dataWithId","map","item","toggleSelection","key","shift","row","selection","state","keyIndex","indexOf","slice","push","setState","toggleAll","selectAll","wrappedInstance","checkboxTable","getWrappedInstance","currentRecords","getResolvedState","sortedData","forEach","_original","_id","isSelected","includes","columns","checkboxProps","selectType","title","r","clicked"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\r\n\r\nimport { Panel, Button } from 'react-bootstrap';\r\nimport ReactTable from 'react-table';\r\nimport checkboxHOC from \"react-table/lib/hoc/selectTable\";\r\n\r\nimport 'react-table/react-table.css';\r\n\r\nconst CheckboxTable = checkboxHOC(ReactTable);\r\n\r\nclass DataGrid extends Component {\r\n    constructor(props){\r\n        super(props);\r\n\r\n        this.state = {\r\n            id: 0,\r\n            selection: [],\r\n            selectAll: false,\r\n            data: this.getData(this.props.data)\r\n        }\r\n    }\r\n\r\n    getData = (data) => {\r\n        // Each data must contains an id \r\n        // in order to show a checkbox.\r\n\r\n        let id = 0;\r\n        const dataWithId = data.map(item => {\r\n            id++;\r\n            return{\r\n                id,\r\n                ...item\r\n            }\r\n        });\r\n    \r\n        return dataWithId;\r\n    };\r\n\r\n    toggleSelection = (key, shift, row) => {\r\n        let selection = [...this.state.selection];\r\n        const keyIndex = selection.indexOf(key);\r\n        if(keyIndex >= 0) {\r\n            selection = [\r\n                ...selection.slice(0, keyIndex),\r\n                ...selection.slice(keyIndex + 1)\r\n            ]\r\n        }\r\n        else {\r\n            selection.push(key);\r\n        }\r\n\r\n        this.setState({selection: [...selection]})\r\n    };\r\n\r\n    toggleAll = () => {\r\n        const selectAll = this.state.selectAll ? false : true;\r\n        const selection = [];\r\n        if (selectAll) {\r\n          const wrappedInstance = this.checkboxTable.getWrappedInstance();\r\n          const currentRecords = wrappedInstance.getResolvedState().sortedData;\r\n          currentRecords.forEach(item => {\r\n            selection.push(item._original._id);\r\n          });\r\n        }\r\n        this.setState({ selectAll, selection });\r\n      };\r\n\r\n      isSelected = key => {\r\n        return this.state.selection.includes(key);\r\n      };\r\n\r\n    render(){\r\n        const { toggleSelection, toggleAll, isSelected } = this;\r\n        const { data, columns, selectAll } = this.state;\r\n        const checkboxProps = {\r\n          selectAll,\r\n          isSelected,\r\n          toggleSelection,\r\n          toggleAll,\r\n          selectType: \"checkbox\",\r\n        //   getTrProps: (s, r) => {\r\n        //     const selected = this.isSelected(r.original._id);\r\n        //     return {\r\n        //       style: {\r\n        //         backgroundColor: selected ? \"lightgreen\" : \"inherit\"\r\n        //       }\r\n        //     };\r\n        //   }\r\n        };\r\n\r\n        return(\r\n            <div>\r\n                <Panel bsStyle='primary'>\r\n                    <Panel.Heading>\r\n                        {this.props.title}\r\n                    </Panel.Heading>\r\n                    <Panel.Body>\r\n                      <CheckboxTable\r\n                          className=\"-striped -highlight\"\r\n                          defaultPageSize={10}\r\n                          ref={r => (this.checkboxTable = r)}\r\n                          data={this.state.data}\r\n                          columns={this.props.columns}\r\n                          {...checkboxProps}\r\n                      />\r\n                    </Panel.Body>\r\n                    <Panel.Footer>\r\n                        <Button onClick={this.props.clicked} bsStyle='primary'>Save</Button>\r\n                        <Button bsStyle='danger'>Delete</Button>\r\n                    </Panel.Footer>\r\n                </Panel>\r\n            </div>\r\n        )\r\n    };\r\n}\r\n\r\nexport default DataGrid;"]},"metadata":{},"sourceType":"module"}