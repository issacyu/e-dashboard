{"ast":null,"code":"import _toConsumableArray from \"C:\\\\Users\\\\issac\\\\Documents\\\\React\\\\e-dashboard\\\\e-dashboard\\\\UI\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/toConsumableArray\";\nimport _objectSpread from \"C:\\\\Users\\\\issac\\\\Documents\\\\React\\\\e-dashboard\\\\e-dashboard\\\\UI\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/objectSpread\";\nimport _classCallCheck from \"C:\\\\Users\\\\issac\\\\Documents\\\\React\\\\e-dashboard\\\\e-dashboard\\\\UI\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"C:\\\\Users\\\\issac\\\\Documents\\\\React\\\\e-dashboard\\\\e-dashboard\\\\UI\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"C:\\\\Users\\\\issac\\\\Documents\\\\React\\\\e-dashboard\\\\e-dashboard\\\\UI\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"C:\\\\Users\\\\issac\\\\Documents\\\\React\\\\e-dashboard\\\\e-dashboard\\\\UI\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"C:\\\\Users\\\\issac\\\\Documents\\\\React\\\\e-dashboard\\\\e-dashboard\\\\UI\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"C:\\\\Users\\\\issac\\\\Documents\\\\React\\\\e-dashboard\\\\e-dashboard\\\\UI\\\\src\\\\hoc\\\\WithGridFunction\\\\WithGridFunction.js\";\nimport React, { Component } from 'react';\nimport Chance from \"chance\";\nvar chance = new Chance();\n\nvar withGridFunction = function withGridFunction(WrappedComponent) {\n  var _temp;\n\n  return _temp =\n  /*#__PURE__*/\n  function (_Component) {\n    _inherits(_temp, _Component);\n\n    function _temp() {\n      var _getPrototypeOf2;\n\n      var _this;\n\n      _classCallCheck(this, _temp);\n\n      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n        args[_key] = arguments[_key];\n      }\n\n      _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(_temp)).call.apply(_getPrototypeOf2, [this].concat(args)));\n      _this.state = {\n        id: 0,\n        selection: [],\n        selectAll: false,\n        data: [],\n        disableDeleteButton: true\n      };\n\n      _this.getData = function (data) {\n        // Each data must contains an id \n        // in order to show a checkbox.\n        var dataWithId = data.map(function (item) {\n          var _id = chance.guid();\n\n          return _objectSpread({\n            _id: _id\n          }, item);\n        });\n        return dataWithId;\n      };\n\n      _this.toggleSelection = function (key, shift, row) {\n        var selection = _toConsumableArray(_this.state.selection);\n\n        var keyIndex = selection.indexOf(key);\n\n        if (keyIndex >= 0) {\n          selection = [].concat(_toConsumableArray(selection.slice(0, keyIndex)), _toConsumableArray(selection.slice(keyIndex + 1)));\n        } else {\n          selection.push(key);\n        }\n\n        _this.setState({\n          selection: selection,\n          disableDeleteButton: selection.length === 0\n        });\n      };\n\n      return _this;\n    }\n\n    _createClass(_temp, [{\n      key: \"render\",\n      // toggleAll = () => {\n      //     const selectAll = this.state.selectAll ? false : true;\n      //     const selection = [];\n      //     if (selectAll) {\n      //       const wrappedInstance = this.checkboxTable.getWrappedInstance();\n      //       const currentRecords = wrappedInstance.getResolvedState().sortedData;\n      //       currentRecords.forEach(item => {\n      //         selection.push(item._original._id);\n      //       });\n      //     }\n      //     this.setState({ \n      //         selectAll, \n      //         selection,\n      //         disableDeleteButton: selection.length === 0\n      //     });\n      //   };\n      // isSelected = key => {\n      //     return this.state.selection.includes(key);\n      // };\n      value: function render() {\n        // const { toggleSelection, toggleAll, isSelected } = this;\n        // const { data, columns, selectAll } = this.state;\n        // const checkboxProps = {\n        //   selectAll,\n        //   isSelected,\n        //   toggleSelection,\n        //   toggleAll,\n        //   selectType: \"checkbox\",\n        //   getTrProps: (s, r) => {\n        //     const selected = this.isSelected(r.original._id);\n        //     return {\n        //       style: {\n        //         backgroundColor: selected ? \"lightgreen\" : \"inherit\"\n        //       }\n        //     };\n        //   }\n        // };\n        return React.createElement(\"div\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 91\n          },\n          __self: this\n        }, React.createElement(WrappedComponent, Object.assign({}, this.props, {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 92\n          },\n          __self: this\n        })));\n      }\n    }]);\n\n    return _temp;\n  }(Component), _temp;\n};\n\nexport default withGridFunction;","map":{"version":3,"sources":["C:\\Users\\issac\\Documents\\React\\e-dashboard\\e-dashboard\\UI\\src\\hoc\\WithGridFunction\\WithGridFunction.js"],"names":["React","Component","Chance","chance","withGridFunction","WrappedComponent","state","id","selection","selectAll","data","disableDeleteButton","getData","dataWithId","map","item","_id","guid","toggleSelection","key","shift","row","keyIndex","indexOf","slice","push","setState","length","props"],"mappings":";;;;;;;;AAAA,OAAOA,KAAP,IAAeC,SAAf,QAA+B,OAA/B;AAEA,OAAOC,MAAP,MAAmB,QAAnB;AAEA,IAAMC,MAAM,GAAG,IAAID,MAAJ,EAAf;;AAEA,IAAME,gBAAgB,GAAG,SAAnBA,gBAAmB,CAACC,gBAAD,EAAsB;AAAA;;AAC3C;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA;;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA,YACIC,KADJ,GACY;AACJC,QAAAA,EAAE,EAAE,CADA;AAEJC,QAAAA,SAAS,EAAE,EAFP;AAGJC,QAAAA,SAAS,EAAE,KAHP;AAIJC,QAAAA,IAAI,EAAE,EAJF;AAKJC,QAAAA,mBAAmB,EAAE;AALjB,OADZ;;AAAA,YASIC,OATJ,GASc,UAACF,IAAD,EAAU;AAChB;AACA;AACA,YAAMG,UAAU,GAAGH,IAAI,CAACI,GAAL,CAAS,UAAAC,IAAI,EAAI;AAChC,cAAMC,GAAG,GAAGb,MAAM,CAACc,IAAP,EAAZ;;AACA;AACID,YAAAA,GAAG,EAAHA;AADJ,aAEOD,IAFP;AAIH,SANkB,CAAnB;AAQA,eAAOF,UAAP;AACH,OArBL;;AAAA,YAuBIK,eAvBJ,GAuBsB,UAACC,GAAD,EAAMC,KAAN,EAAaC,GAAb,EAAqB;AACnC,YAAIb,SAAS,sBAAO,MAAKF,KAAL,CAAWE,SAAlB,CAAb;;AACA,YAAMc,QAAQ,GAAGd,SAAS,CAACe,OAAV,CAAkBJ,GAAlB,CAAjB;;AACA,YAAGG,QAAQ,IAAI,CAAf,EAAkB;AACdd,UAAAA,SAAS,gCACFA,SAAS,CAACgB,KAAV,CAAgB,CAAhB,EAAmBF,QAAnB,CADE,sBAEFd,SAAS,CAACgB,KAAV,CAAgBF,QAAQ,GAAG,CAA3B,CAFE,EAAT;AAIH,SALD,MAMK;AACDd,UAAAA,SAAS,CAACiB,IAAV,CAAeN,GAAf;AACH;;AAED,cAAKO,QAAL,CAAc;AACVlB,UAAAA,SAAS,EAATA,SADU;AAEVG,UAAAA,mBAAmB,EAAEH,SAAS,CAACmB,MAAV,KAAqB;AAFhC,SAAd;AAIH,OAxCL;;AAAA;AAAA;;AAAA;AAAA;AA0CI;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AA7DJ,+BA+DY;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA,eACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WACI,oBAAC,gBAAD,oBAAsB,KAAKC,KAA3B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WADJ,CADJ;AAKH;AAvFL;;AAAA;AAAA,IAAqB3B,SAArB;AAyFH,CA1FD;;AA4FA,eAAeG,gBAAf","sourcesContent":["import React, {Component} from 'react';\r\n\r\nimport Chance from \"chance\";\r\n\r\nconst chance = new Chance();\r\n\r\nconst withGridFunction = (WrappedComponent) => {\r\n    return class extends Component{\r\n        state = {\r\n            id: 0,\r\n            selection: [],\r\n            selectAll: false,\r\n            data: [],\r\n            disableDeleteButton: true\r\n        }\r\n\r\n        getData = (data) => {\r\n            // Each data must contains an id \r\n            // in order to show a checkbox.\r\n            const dataWithId = data.map(item => {\r\n                const _id = chance.guid();\r\n                return{\r\n                    _id,\r\n                    ...item\r\n                }\r\n            });\r\n        \r\n            return dataWithId;\r\n        };\r\n\r\n        toggleSelection = (key, shift, row) => {\r\n            let selection = [...this.state.selection];\r\n            const keyIndex = selection.indexOf(key);\r\n            if(keyIndex >= 0) {\r\n                selection = [\r\n                    ...selection.slice(0, keyIndex),\r\n                    ...selection.slice(keyIndex + 1)\r\n                ]\r\n            }\r\n            else {\r\n                selection.push(key);\r\n            }\r\n    \r\n            this.setState({\r\n                selection,\r\n                disableDeleteButton: selection.length === 0\r\n            })\r\n        };\r\n\r\n        // toggleAll = () => {\r\n        //     const selectAll = this.state.selectAll ? false : true;\r\n        //     const selection = [];\r\n        //     if (selectAll) {\r\n        //       const wrappedInstance = this.checkboxTable.getWrappedInstance();\r\n        //       const currentRecords = wrappedInstance.getResolvedState().sortedData;\r\n        //       currentRecords.forEach(item => {\r\n        //         selection.push(item._original._id);\r\n        //       });\r\n        //     }\r\n        //     this.setState({ \r\n        //         selectAll, \r\n        //         selection,\r\n        //         disableDeleteButton: selection.length === 0\r\n        //     });\r\n        //   };\r\n\r\n        // isSelected = key => {\r\n        //     return this.state.selection.includes(key);\r\n        // };\r\n\r\n        render(){\r\n            // const { toggleSelection, toggleAll, isSelected } = this;\r\n            // const { data, columns, selectAll } = this.state;\r\n            // const checkboxProps = {\r\n            //   selectAll,\r\n            //   isSelected,\r\n            //   toggleSelection,\r\n            //   toggleAll,\r\n            //   selectType: \"checkbox\",\r\n            //   getTrProps: (s, r) => {\r\n            //     const selected = this.isSelected(r.original._id);\r\n            //     return {\r\n            //       style: {\r\n            //         backgroundColor: selected ? \"lightgreen\" : \"inherit\"\r\n            //       }\r\n            //     };\r\n            //   }\r\n            // };\r\n\r\n            return(\r\n                <div>\r\n                    <WrappedComponent {...this.props} />\r\n                </div>\r\n            );\r\n        }\r\n    }\r\n}\r\n\r\nexport default withGridFunction;"]},"metadata":{},"sourceType":"module"}