{"ast":null,"code":"import _regeneratorRuntime from \"C:\\\\Users\\\\issac\\\\Documents\\\\React\\\\e-dashboard\\\\e-dashboard\\\\UI\\\\node_modules\\\\@babel\\\\runtime/regenerator\";\nimport _asyncToGenerator from \"C:\\\\Users\\\\issac\\\\Documents\\\\React\\\\e-dashboard\\\\e-dashboard\\\\UI\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/asyncToGenerator\";\nimport axios from '../../axios/AxiosConfig';\nimport * as actionTypes from './actionTypes';\nexport var fetchInventoryDataSuccess = function fetchInventoryDataSuccess(data) {\n  return {\n    type: actionTypes.FETCH_INVENTORY_DATA_SUCCESS,\n    InventoryData: data\n  };\n};\nexport var fetchInventoryDataFail = function fetchInventoryDataFail(error) {\n  return {\n    type: actionTypes.FETCH_INVENTORY_DATA_FAIL,\n    error: error\n  };\n};\nexport var fetchInventoryDataStart = function fetchInventoryDataStart() {\n  return {\n    type: actionTypes.FETCH_INVENTORY_DATA_START\n  };\n};\nexport var fetchInventoryData = function fetchInventoryData() {\n  return function (dispatch) {\n    try {\n      dispatch(fetchInventoryDataStart());\n\n      var getData =\n      /*#__PURE__*/\n      function () {\n        var _ref = _asyncToGenerator(\n        /*#__PURE__*/\n        _regeneratorRuntime.mark(function _callee() {\n          return _regeneratorRuntime.wrap(function _callee$(_context) {\n            while (1) {\n              switch (_context.prev = _context.next) {\n                case 0:\n                  _context.next = 2;\n                  return axios.get('api/inventories');\n\n                case 2:\n                  return _context.abrupt(\"return\", _context.sent);\n\n                case 3:\n                case \"end\":\n                  return _context.stop();\n              }\n            }\n          }, _callee, this);\n        }));\n\n        return function getData() {\n          return _ref.apply(this, arguments);\n        };\n      }();\n\n      dispatch(getData.then(function (res) {\n        return fetchInventoryDataSuccess(res.data);\n      }));\n    } catch (err) {\n      dispatch(fetchInventoryDataFail(err));\n    }\n  };\n};\nexport var saveInventoryDataSuccess = function saveInventoryDataSuccess(data) {\n  return {\n    type: actionTypes.SAVE_INVENTORY_DATA_SUCCESS,\n    overviewData: data\n  };\n};\nexport var saveInventoryDataFail = function saveInventoryDataFail(error) {\n  return {\n    type: actionTypes.SAVE_INVENTORY_DATA_FAIL,\n    error: error\n  };\n};\nexport var saveInventoryDataStart = function saveInventoryDataStart() {\n  return {\n    type: actionTypes.SAVE_INVENTORY_DATA_START\n  };\n};\nexport var saveInventoryData = function saveInventoryData(newData) {\n  return function (dispatch) {\n    try {\n      dispatch(saveInventoryDataStart());\n\n      var postData =\n      /*#__PURE__*/\n      function () {\n        var _ref2 = _asyncToGenerator(\n        /*#__PURE__*/\n        _regeneratorRuntime.mark(function _callee2() {\n          return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n            while (1) {\n              switch (_context2.prev = _context2.next) {\n                case 0:\n                  _context2.next = 2;\n                  return axios.post('/inventory.json', newData);\n\n                case 2:\n                  return _context2.abrupt(\"return\", _context2.sent);\n\n                case 3:\n                case \"end\":\n                  return _context2.stop();\n              }\n            }\n          }, _callee2, this);\n        }));\n\n        return function postData() {\n          return _ref2.apply(this, arguments);\n        };\n      }();\n\n      dispatch(postData().then(function (res) {\n        return dispatch(saveInventoryDataSuccess(res.data));\n      }));\n    } catch (err) {\n      dispatch(saveInventoryDataFail(err));\n    }\n  };\n};","map":{"version":3,"sources":["C:\\Users\\issac\\Documents\\React\\e-dashboard\\e-dashboard\\UI\\src\\store\\actions\\inventory.js"],"names":["axios","actionTypes","fetchInventoryDataSuccess","data","type","FETCH_INVENTORY_DATA_SUCCESS","InventoryData","fetchInventoryDataFail","error","FETCH_INVENTORY_DATA_FAIL","fetchInventoryDataStart","FETCH_INVENTORY_DATA_START","fetchInventoryData","dispatch","getData","get","then","res","err","saveInventoryDataSuccess","SAVE_INVENTORY_DATA_SUCCESS","overviewData","saveInventoryDataFail","SAVE_INVENTORY_DATA_FAIL","saveInventoryDataStart","SAVE_INVENTORY_DATA_START","saveInventoryData","newData","postData","post"],"mappings":";;AAAA,OAAOA,KAAP,MAAkB,yBAAlB;AAEA,OAAO,KAAKC,WAAZ,MAA6B,eAA7B;AAEA,OAAO,IAAMC,yBAAyB,GAAG,SAA5BA,yBAA4B,CAACC,IAAD,EAAU;AAC/C,SAAO;AACHC,IAAAA,IAAI,EAAEH,WAAW,CAACI,4BADf;AAEHC,IAAAA,aAAa,EAAEH;AAFZ,GAAP;AAIH,CALM;AAOP,OAAO,IAAMI,sBAAsB,GAAG,SAAzBA,sBAAyB,CAACC,KAAD,EAAW;AAC7C,SAAO;AACHJ,IAAAA,IAAI,EAAEH,WAAW,CAACQ,yBADf;AAEHD,IAAAA,KAAK,EAAEA;AAFJ,GAAP;AAIH,CALM;AAOP,OAAO,IAAME,uBAAuB,GAAG,SAA1BA,uBAA0B,GAAM;AACzC,SAAO;AACHN,IAAAA,IAAI,EAAEH,WAAW,CAACU;AADf,GAAP;AAGH,CAJM;AAMP,OAAO,IAAMC,kBAAkB,GAAG,SAArBA,kBAAqB,GAAM;AACpC,SAAO,UAAAC,QAAQ,EAAI;AACf,QAAI;AACAA,MAAAA,QAAQ,CAACH,uBAAuB,EAAxB,CAAR;;AACA,UAAMI,OAAO;AAAA;AAAA;AAAA;AAAA;AAAA,iCAAG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,yBACCd,KAAK,CAACe,GAAN,CAAU,iBAAV,CADD;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAAH;;AAAA,wBAAPD,OAAO;AAAA;AAAA;AAAA,SAAb;;AAGAD,MAAAA,QAAQ,CAACC,OAAO,CAACE,IAAR,CAAa,UAAAC,GAAG;AAAA,eAAIf,yBAAyB,CAACe,GAAG,CAACd,IAAL,CAA7B;AAAA,OAAhB,CAAD,CAAR;AACH,KAND,CAOA,OAAMe,GAAN,EAAW;AACPL,MAAAA,QAAQ,CAACN,sBAAsB,CAACW,GAAD,CAAvB,CAAR;AACH;AAEJ,GAZD;AAaH,CAdM;AAgBP,OAAO,IAAMC,wBAAwB,GAAG,SAA3BA,wBAA2B,CAAChB,IAAD,EAAU;AAC9C,SAAO;AACHC,IAAAA,IAAI,EAAEH,WAAW,CAACmB,2BADf;AAEHC,IAAAA,YAAY,EAAElB;AAFX,GAAP;AAIH,CALM;AAOP,OAAO,IAAMmB,qBAAqB,GAAG,SAAxBA,qBAAwB,CAACd,KAAD,EAAW;AAC5C,SAAO;AACHJ,IAAAA,IAAI,EAAEH,WAAW,CAACsB,wBADf;AAEHf,IAAAA,KAAK,EAAEA;AAFJ,GAAP;AAIH,CALM;AAOP,OAAO,IAAMgB,sBAAsB,GAAG,SAAzBA,sBAAyB,GAAM;AACxC,SAAO;AACHpB,IAAAA,IAAI,EAAEH,WAAW,CAACwB;AADf,GAAP;AAGH,CAJM;AAMP,OAAO,IAAMC,iBAAiB,GAAG,SAApBA,iBAAoB,CAACC,OAAD,EAAa;AAC1C,SAAO,UAAAd,QAAQ,EAAI;AACf,QAAI;AACAA,MAAAA,QAAQ,CAACW,sBAAsB,EAAvB,CAAR;;AACA,UAAMI,QAAQ;AAAA;AAAA;AAAA;AAAA;AAAA,iCAAG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,yBACA5B,KAAK,CAAC6B,IAAN,CAAW,iBAAX,EAA8BF,OAA9B,CADA;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAAH;;AAAA,wBAARC,QAAQ;AAAA;AAAA;AAAA,SAAd;;AAGAf,MAAAA,QAAQ,CAACe,QAAQ,GAAGZ,IAAX,CAAiB,UAAAC,GAAG;AAAA,eACzBJ,QAAQ,CAACM,wBAAwB,CAACF,GAAG,CAACd,IAAL,CAAzB,CADiB;AAAA,OAApB,CAAD,CAAR;AAGH,KARD,CASA,OAAMe,GAAN,EAAW;AACPL,MAAAA,QAAQ,CAACS,qBAAqB,CAACJ,GAAD,CAAtB,CAAR;AACH;AACJ,GAbD;AAcH,CAfM","sourcesContent":["import axios from '../../axios/AxiosConfig';\r\n\r\nimport * as actionTypes from './actionTypes';\r\n\r\nexport const fetchInventoryDataSuccess = (data) => {\r\n    return {\r\n        type: actionTypes.FETCH_INVENTORY_DATA_SUCCESS,\r\n        InventoryData: data\r\n    };\r\n}\r\n\r\nexport const fetchInventoryDataFail = (error) => {\r\n    return {\r\n        type: actionTypes.FETCH_INVENTORY_DATA_FAIL,\r\n        error: error\r\n    };\r\n}\r\n\r\nexport const fetchInventoryDataStart = () => {\r\n    return {\r\n        type: actionTypes.FETCH_INVENTORY_DATA_START\r\n    };\r\n}\r\n\r\nexport const fetchInventoryData = () => {\r\n    return dispatch => {\r\n        try {\r\n            dispatch(fetchInventoryDataStart());\r\n            const getData = async() => {\r\n                return await axios.get('api/inventories');\r\n            }\r\n            dispatch(getData.then(res => fetchInventoryDataSuccess(res.data)));\r\n        }\r\n        catch(err) {\r\n            dispatch(fetchInventoryDataFail(err));\r\n        }\r\n        \r\n    }\r\n}\r\n\r\nexport const saveInventoryDataSuccess = (data) => {\r\n    return {\r\n        type: actionTypes.SAVE_INVENTORY_DATA_SUCCESS,\r\n        overviewData: data,\r\n    };\r\n}\r\n\r\nexport const saveInventoryDataFail = (error) => {\r\n    return {\r\n        type: actionTypes.SAVE_INVENTORY_DATA_FAIL,\r\n        error: error,\r\n    };\r\n}\r\n\r\nexport const saveInventoryDataStart = () => {\r\n    return {\r\n        type: actionTypes.SAVE_INVENTORY_DATA_START,\r\n    };\r\n}\r\n\r\nexport const saveInventoryData = (newData) => {\r\n    return dispatch => {\r\n        try {\r\n            dispatch(saveInventoryDataStart());\r\n            const postData = async() => {\r\n                return await axios.post('/inventory.json', newData);   \r\n            }\r\n            dispatch(postData().then( res => \r\n                dispatch(saveInventoryDataSuccess(res.data))\r\n            ));\r\n        }\r\n        catch(err) {\r\n            dispatch(saveInventoryDataFail(err))\r\n        }\r\n    }\r\n}"]},"metadata":{},"sourceType":"module"}