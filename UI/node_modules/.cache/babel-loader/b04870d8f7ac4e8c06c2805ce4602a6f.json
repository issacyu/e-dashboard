{"ast":null,"code":"import _toConsumableArray from \"C:\\\\Users\\\\issac\\\\Documents\\\\React\\\\e-dashboard\\\\e-dashboard\\\\UI\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/toConsumableArray\";\nimport _classCallCheck from \"C:\\\\Users\\\\issac\\\\Documents\\\\React\\\\e-dashboard\\\\e-dashboard\\\\UI\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"C:\\\\Users\\\\issac\\\\Documents\\\\React\\\\e-dashboard\\\\e-dashboard\\\\UI\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"C:\\\\Users\\\\issac\\\\Documents\\\\React\\\\e-dashboard\\\\e-dashboard\\\\UI\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"C:\\\\Users\\\\issac\\\\Documents\\\\React\\\\e-dashboard\\\\e-dashboard\\\\UI\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"C:\\\\Users\\\\issac\\\\Documents\\\\React\\\\e-dashboard\\\\e-dashboard\\\\UI\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"C:\\\\Users\\\\issac\\\\Documents\\\\React\\\\e-dashboard\\\\e-dashboard\\\\UI\\\\src\\\\containers\\\\Overview\\\\Overview.js\";\nimport React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport * as JsonPatch from 'fast-json-patch';\nimport * as actions from '../../store/actions/overview';\nimport { Row, Col, Panel, Grid, Card } from 'react-bootstrap';\nimport BarChart from '../../components/Charts/BarChart';\nimport LineChart from '../../components/Charts/LineChart';\nimport PieChart from '../../components/Charts/PieChart';\nimport DataGrid from '../../components/Table/DataGrid/DataGrid';\nimport * as GridColumns from '../../components/Table/GridColumns/GridColumns';\nimport WithGridFunction from '../../hoc/WithGridFunction/WithGridFunction';\nimport EmptyRow from '../../components/Table/GridRows/GridRow';\nimport * as Utility from '../../components/Charts/Utilities';\nimport styles from './Overview.css';\n\nvar Overview =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(Overview, _Component);\n\n  function Overview() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, Overview);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(Overview)).call.apply(_getPrototypeOf2, [this].concat(args)));\n    _this.state = {\n      salesData: [],\n      origSalesData: [],\n      topFiveProduct: [],\n      completeVsReturn: [],\n      saleAndProfit: [],\n      mockData: [{\n        product: 'iPhone Xs',\n        quantity: 10,\n        price: 1300,\n        category: 'electronic',\n        model: '128gb',\n        type: '',\n        color: 'gold',\n        condition: 'new',\n        manufacturer: 'Apple',\n        cost: 1200,\n        totalCost: 1200\n      }, {\n        product: 'iPhone Xs',\n        quantity: 5,\n        price: 1300,\n        category: 'electronic',\n        model: '128gb',\n        type: '',\n        color: 'gold',\n        condition: 'new',\n        manufacturer: 'Apple',\n        cost: 1200,\n        totalCost: 1200\n      }, {\n        product: 'Samsung Galaxy Note 10',\n        quantity: 5,\n        price: 799,\n        category: 'electronic',\n        model: '128gb',\n        type: '',\n        color: 'Black',\n        condition: 'new',\n        manufacturer: 'Samsung',\n        cost: 500,\n        totalCost: 560\n      }, {\n        product: 'LED Bulb',\n        quantity: 1000,\n        price: 9.99,\n        category: 'home',\n        model: '100 Watt',\n        type: 'LED',\n        color: 'Warm White',\n        condition: 'new',\n        manufacturer: 'Mr.LED',\n        cost: 500,\n        totalCost: 700\n      }]\n    };\n\n    _this.onSalesRenderEditableCellHandler = function (cellInfo) {\n      // Avoid exception! We don't want to modify an empty array.\n      if (_this.state.salesData.length !== 0) {\n        return React.createElement(\"div\", {\n          style: {\n            backgroundColor: \"#fafafa\"\n          },\n          contentEditable: true,\n          suppressContentEditableWarning: true,\n          onBlur: function onBlur(e) {\n            var data = _toConsumableArray(_this.state.salesData);\n\n            data[cellInfo.index][cellInfo.column.id] = e.target.innerHTML;\n\n            _this.setState({\n              salesData: data\n            });\n          },\n          dangerouslySetInnerHTML: {\n            __html: _this.state.salesData[cellInfo.index][cellInfo.column.id]\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 115\n          },\n          __self: this\n        });\n      }\n    };\n\n    _this.onSaveOverviewHandler = function () {\n      var patchDoc = JsonPatch.compare(_this.state.origSalesData, _this.state.salesData);\n\n      _this.props.onSaveOverviewData(patchDoc, _this.state.salesData);\n\n      _this.setState({\n        origSalesData: JSON.parse(JSON.stringify(_this.state.salesData))\n      });\n    };\n\n    return _this;\n  }\n\n  _createClass(Overview, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      this.props.onFetchOverviewData();\n    }\n  }, {\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate(prevProps) {\n      // For the initial load.\n      if (this.props.overviewData !== prevProps.overviewData) {\n        var gridData = this.props.overviewData;\n        this.setState({\n          salesData: JSON.parse(JSON.stringify(gridData)),\n          origSalesData: JSON.parse(JSON.stringify(gridData))\n        }); // Assign data to HOC state.\n\n        this.props.setData(gridData);\n        this.setState({\n          topFiveProduct: Utility.getTopFive(gridData, 'product', 'quantity'),\n          completeVsReturn: Utility.getCompleteVsReturn(gridData),\n          saleAndProfit: Utility.getSaleAndProfit(gridData)\n        });\n      } // When add or remove data from grid, we want to assign new data to the state.\n      // The this.props.data is from HOC.\n\n\n      if (this.props.data !== prevProps.data) {\n        this.setState({\n          salesData: JSON.parse(JSON.stringify(this.props.data))\n        });\n      }\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 140\n        },\n        __self: this\n      }, React.createElement(Row, {\n        className: \"show-grid\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 141\n        },\n        __self: this\n      }, React.createElement(Col, {\n        md: 12,\n        lg: 12,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 153\n        },\n        __self: this\n      }, React.createElement(LineChart, {\n        data: this.state.saleAndProfit,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 154\n        },\n        __self: this\n      }))), React.createElement(Row, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 159\n        },\n        __self: this\n      }, React.createElement(Col, {\n        md: 3,\n        lg: 3,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 160\n        },\n        __self: this\n      }, \"Top 5 selling products\", React.createElement(BarChart, {\n        width: 600,\n        height: 300,\n        data: this.state.topFiveProduct,\n        displayKey: \"product\",\n        displayValue: \"quantity\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 162\n        },\n        __self: this\n      })), React.createElement(Col, {\n        md: 3,\n        lg: 3,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 170\n        },\n        __self: this\n      }, \"Category\", React.createElement(PieChart, {\n        bsStyle: \"primary\",\n        displayData: this.state.mockData,\n        displayKey: \"product\",\n        displayValue: \"totalCost\",\n        width: 800,\n        height: 300,\n        cx: 220,\n        cy: 100,\n        outerRadius: 130,\n        fill: \"#8884d8\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 172\n        },\n        __self: this\n      })), React.createElement(Col, {\n        md: 3,\n        lg: 3,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 185\n        },\n        __self: this\n      }, React.createElement(Card, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 187\n        },\n        __self: this\n      }, React.createElement(Card.Body, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 188\n        },\n        __self: this\n      }, React.createElement(Card.Title, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 189\n        },\n        __self: this\n      }, \"Sale\"), React.createElement(Card.Body, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 192\n        },\n        __self: this\n      }, \"$71365.98\")))), React.createElement(Col, {\n        md: 3,\n        lg: 3,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 196\n        },\n        __self: this\n      }, \"cost vs profit\", React.createElement(PieChart, {\n        bsStyle: \"primary\",\n        displayData: this.state.completeVsReturn,\n        displayKey: \"Status\",\n        displayValue: \"Number\",\n        width: 800,\n        height: 300,\n        cx: 220,\n        cy: 100,\n        outerRadius: 130,\n        fill: \"#8884d8\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 198\n        },\n        __self: this\n      }))), React.createElement(Row, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 212\n        },\n        __self: this\n      }, React.createElement(Col, {\n        md: 12,\n        lg: 12,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 213\n        },\n        __self: this\n      }, React.createElement(DataGrid //The key uses to notify the child component to re-render.\n      , {\n        key: this.state.salesData,\n        data: this.state.salesData,\n        emptyRow: EmptyRow(),\n        columns: GridColumns.SALES_COLUMNS(this.onSalesRenderEditableCellHandler),\n        onSaveHandler: this.onSaveOverviewHandler,\n        checkboxProps: this.props.checkboxProps,\n        disableDeleteButton: this.props.disableDeleteButton,\n        onDeleteRowHandler: this.props.onDeleteRowHandler,\n        onAddRowHandler: this.props.onAddRowHandler,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 214\n        },\n        __self: this\n      }))));\n    }\n  }]);\n\n  return Overview;\n}(Component);\n\nvar mapStateToProps = function mapStateToProps(state) {\n  return {\n    overviewData: state.overview.overviewData\n  };\n};\n\nvar mapDispatchToProps = function mapDispatchToProps(dispatch) {\n  return {\n    onFetchOverviewData: function onFetchOverviewData() {\n      return dispatch(actions.fetchOverviewData());\n    },\n    onSaveOverviewData: function onSaveOverviewData(patchDoc, salesData) {\n      return dispatch(actions.saveOverviewData(patchDoc, salesData));\n    }\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(WithGridFunction(Overview));","map":{"version":3,"sources":["C:\\Users\\issac\\Documents\\React\\e-dashboard\\e-dashboard\\UI\\src\\containers\\Overview\\Overview.js"],"names":["React","Component","connect","JsonPatch","actions","Row","Col","Panel","Grid","Card","BarChart","LineChart","PieChart","DataGrid","GridColumns","WithGridFunction","EmptyRow","Utility","styles","Overview","state","salesData","origSalesData","topFiveProduct","completeVsReturn","saleAndProfit","mockData","product","quantity","price","category","model","type","color","condition","manufacturer","cost","totalCost","onSalesRenderEditableCellHandler","cellInfo","length","backgroundColor","e","data","index","column","id","target","innerHTML","setState","__html","onSaveOverviewHandler","patchDoc","compare","props","onSaveOverviewData","JSON","parse","stringify","onFetchOverviewData","prevProps","overviewData","gridData","setData","getTopFive","getCompleteVsReturn","getSaleAndProfit","SALES_COLUMNS","checkboxProps","disableDeleteButton","onDeleteRowHandler","onAddRowHandler","mapStateToProps","overview","mapDispatchToProps","dispatch","fetchOverviewData","saveOverviewData"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport * as JsonPatch from 'fast-json-patch';\r\nimport * as actions from '../../store/actions/overview'\r\nimport { Row, Col, Panel, Grid, Card } from 'react-bootstrap';\r\n\r\nimport BarChart from '../../components/Charts/BarChart';\r\nimport LineChart from '../../components/Charts/LineChart';\r\nimport PieChart from '../../components/Charts/PieChart';\r\nimport DataGrid from '../../components/Table/DataGrid/DataGrid';\r\nimport * as GridColumns from '../../components/Table/GridColumns/GridColumns';\r\nimport WithGridFunction from '../../hoc/WithGridFunction/WithGridFunction';\r\nimport EmptyRow from '../../components/Table/GridRows/GridRow';\r\nimport * as Utility from '../../components/Charts/Utilities';\r\nimport styles from './Overview.css';\r\n\r\nclass Overview extends Component {\r\n\r\n    state = {\r\n        salesData: [],\r\n        origSalesData: [],\r\n        topFiveProduct: [],\r\n        completeVsReturn: [],\r\n        saleAndProfit: [],\r\n        mockData: \r\n        [\r\n            {\r\n                product: 'iPhone Xs',\r\n                quantity: 10,\r\n                price: 1300,\r\n                category: 'electronic',\r\n                model: '128gb',\r\n                type: '',\r\n                color: 'gold',\r\n                condition: 'new',\r\n                manufacturer: 'Apple',\r\n                cost: 1200,\r\n                totalCost: 1200\r\n            },\r\n            {\r\n                product: 'iPhone Xs',\r\n                quantity: 5,\r\n                price: 1300,\r\n                category: 'electronic',\r\n                model: '128gb',\r\n                type: '',\r\n                color: 'gold',\r\n                condition: 'new',\r\n                manufacturer: 'Apple',\r\n                cost: 1200,\r\n                totalCost: 1200\r\n            },\r\n            {\r\n                product: 'Samsung Galaxy Note 10',\r\n                quantity: 5,\r\n                price: 799,\r\n                category: 'electronic',\r\n                model: '128gb',\r\n                type: '',\r\n                color: 'Black',\r\n                condition: 'new',\r\n                manufacturer: 'Samsung',\r\n                cost: 500,\r\n                totalCost: 560\r\n            },\r\n            {\r\n                product: 'LED Bulb',\r\n                quantity: 1000,\r\n                price: 9.99,\r\n                category: 'home',\r\n                model: '100 Watt',\r\n                type: 'LED',\r\n                color: 'Warm White',\r\n                condition: 'new',\r\n                manufacturer: 'Mr.LED',\r\n                cost: 500,\r\n                totalCost: 700\r\n            },\r\n        ]\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.props.onFetchOverviewData();\r\n    }\r\n\r\n    componentDidUpdate(prevProps) {\r\n        // For the initial load.\r\n        if(this.props.overviewData !== prevProps.overviewData) {\r\n            const gridData = this.props.overviewData;\r\n            this.setState({\r\n                salesData: JSON.parse(JSON.stringify(gridData)),\r\n                origSalesData: JSON.parse(JSON.stringify(gridData))\r\n            })\r\n            // Assign data to HOC state.\r\n            this.props.setData(gridData);\r\n            this.setState({\r\n                topFiveProduct: Utility.getTopFive(gridData, 'product', 'quantity'),\r\n                completeVsReturn: Utility.getCompleteVsReturn(gridData),\r\n                saleAndProfit: Utility.getSaleAndProfit(gridData)\r\n            });\r\n        }\r\n        // When add or remove data from grid, we want to assign new data to the state.\r\n        // The this.props.data is from HOC.\r\n        if(this.props.data !== prevProps.data){\r\n            this.setState({\r\n                salesData: JSON.parse(JSON.stringify(this.props.data))\r\n            })\r\n        }\r\n    }\r\n\r\n    onSalesRenderEditableCellHandler = (cellInfo) => {\r\n        // Avoid exception! We don't want to modify an empty array.\r\n        if(this.state.salesData.length !== 0) {\r\n            return (\r\n                <div\r\n                    style={{ backgroundColor: \"#fafafa\" }}\r\n                    contentEditable\r\n                    suppressContentEditableWarning\r\n                    onBlur={e => {\r\n                        const data = [...this.state.salesData];\r\n                        data[cellInfo.index][cellInfo.column.id] = e.target.innerHTML;\r\n                        this.setState({salesData: data});\r\n                    }}\r\n                    dangerouslySetInnerHTML={{\r\n                        __html: this.state.salesData[cellInfo.index][cellInfo.column.id]\r\n                    }}\r\n                />\r\n            );\r\n        }\r\n    }\r\n\r\n    onSaveOverviewHandler = () => {\r\n        const patchDoc = JsonPatch.compare(this.state.origSalesData, this.state.salesData);\r\n        this.props.onSaveOverviewData(patchDoc, this.state.salesData);\r\n        this.setState({origSalesData: JSON.parse(JSON.stringify(this.state.salesData))});\r\n    }\r\n\r\n    render(){\r\n        return(\r\n            <div>\r\n                <Row className=\"show-grid\">\r\n                    {/* <Col md={4} lg={4}>\r\n                        <Panel>\r\n                            <ul class=\"list-group\">\r\n                                <li class=\"list-group-item\">Sales: $71365.98</li>\r\n                                <li class=\"list-group-item\">Renvenue: $45265.28</li>\r\n                                <li class=\"list-group-item\">Order: 64031</li>\r\n                                <li class=\"list-group-item\">Return: 235</li>\r\n                            </ul>\r\n                        </Panel>\r\n                    </Col> */}\r\n\r\n                    <Col md={12} lg={12}>\r\n                        <LineChart \r\n                            data={this.state.saleAndProfit}\r\n                        />\r\n                    </Col>\r\n                </Row>\r\n                <Row>\r\n                    <Col md={3} lg={3}>\r\n                        Top 5 selling products\r\n                        <BarChart \r\n                            width={600}\r\n                            height={300}\r\n                            data={this.state.topFiveProduct}\r\n                            displayKey='product'\r\n                            displayValue='quantity'\r\n                        />\r\n                    </Col>\r\n                    <Col md={3} lg={3}>\r\n                        Category\r\n                        <PieChart \r\n                            bsStyle='primary'\r\n                            displayData={this.state.mockData}\r\n                            displayKey='product'\r\n                            displayValue='totalCost'\r\n                            width={800}\r\n                            height={300}\r\n                            cx={220}\r\n                            cy={100}\r\n                            outerRadius={130}\r\n                            fill='#8884d8'\r\n                        />\r\n                    </Col>\r\n                    <Col md={3} lg={3}>\r\n\r\n                        <Card>\r\n                            <Card.Body>\r\n                                <Card.Title>\r\n                                    Sale\r\n                                </Card.Title>\r\n                                <Card.Body>$71365.98</Card.Body>\r\n                            </Card.Body>\r\n                        </Card>\r\n                    </Col>\r\n                    <Col md={3} lg={3}>\r\n                        cost vs profit\r\n                        <PieChart \r\n                            bsStyle='primary'\r\n                            displayData={this.state.completeVsReturn}\r\n                            displayKey='Status'\r\n                            displayValue='Number'\r\n                            width={800}\r\n                            height={300}\r\n                            cx={220}\r\n                            cy={100}\r\n                            outerRadius={130}\r\n                            fill='#8884d8'\r\n                        />\r\n                    </Col>\r\n                </Row>\r\n                <Row>\r\n                    <Col md={12} lg={12}>\r\n                        <DataGrid \r\n                            //The key uses to notify the child component to re-render.\r\n                            key={this.state.salesData}\r\n                            data={this.state.salesData}\r\n                            emptyRow={EmptyRow()}\r\n                            columns={GridColumns.SALES_COLUMNS(this.onSalesRenderEditableCellHandler)}\r\n                            onSaveHandler={this.onSaveOverviewHandler}\r\n                            checkboxProps={this.props.checkboxProps}\r\n                            disableDeleteButton={this.props.disableDeleteButton}\r\n                            onDeleteRowHandler={this.props.onDeleteRowHandler}\r\n                            onAddRowHandler={this.props.onAddRowHandler}\r\n                        />\r\n                    </Col>\r\n                </Row>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        overviewData: state.overview.overviewData\r\n    }\r\n};\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n    return {\r\n        onFetchOverviewData: () => dispatch(actions.fetchOverviewData()),\r\n        onSaveOverviewData: (patchDoc, salesData) => dispatch(actions.saveOverviewData(patchDoc, salesData))\r\n    };\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(WithGridFunction(Overview));"]},"metadata":{},"sourceType":"module"}