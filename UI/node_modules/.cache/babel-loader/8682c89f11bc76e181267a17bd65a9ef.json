{"ast":null,"code":"import _toConsumableArray from \"C:\\\\Users\\\\issac\\\\Documents\\\\React\\\\simple-dashboard\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/toConsumableArray\";\nimport _classCallCheck from \"C:\\\\Users\\\\issac\\\\Documents\\\\React\\\\simple-dashboard\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"C:\\\\Users\\\\issac\\\\Documents\\\\React\\\\simple-dashboard\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"C:\\\\Users\\\\issac\\\\Documents\\\\React\\\\simple-dashboard\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"C:\\\\Users\\\\issac\\\\Documents\\\\React\\\\simple-dashboard\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"C:\\\\Users\\\\issac\\\\Documents\\\\React\\\\simple-dashboard\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";\nimport _objectSpread from \"C:\\\\Users\\\\issac\\\\Documents\\\\React\\\\simple-dashboard\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/objectSpread\";\n\nvar _this = this,\n    _jsxFileName = \"C:\\\\Users\\\\issac\\\\Documents\\\\React\\\\simple-dashboard\\\\src\\\\components\\\\Table\\\\DataGrid\\\\DataGrid.js\";\n\nimport React, { Component } from 'react';\nimport { Panel, Button } from 'react-bootstrap';\nimport ReactTable from 'react-table';\nimport checkboxHOC from \"react-table/lib/hoc/selectTable\";\nimport 'react-table/react-table.css';\nvar CheckboxTable = checkboxHOC(ReactTable);\n\nvar getData = function getData(data) {\n  var dataWithId = data.map(function (item) {\n    var _id = _this.state.id;\n    console.log('id from getdata: ' + _id);\n    return _objectSpread({\n      _id: _id\n    }, item);\n  });\n  return dataWithId;\n};\n\nvar DataGrid =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(DataGrid, _Component);\n\n  function DataGrid() {\n    var _getPrototypeOf2;\n\n    var _this2;\n\n    _classCallCheck(this, DataGrid);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this2 = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(DataGrid)).call.apply(_getPrototypeOf2, [this].concat(args)));\n    _this2.state = {\n      id: 0,\n      selection: [],\n      selectAll: false,\n      data: []\n    };\n\n    _this2.toggleSelection = function (key, shift, row) {\n      var selection = _toConsumableArray(_this2.state.selection);\n\n      var keyIndex = selection.indexOf(key);\n      var data = _this2.state.data;\n\n      if (keyIndex > 0) {\n        selection = [].concat(_toConsumableArray(selection.slice(0, keyIndex)), _toConsumableArray(selection.slice(keyIndex + 1)));\n      } else {\n        selection.push(key);\n      }\n    };\n\n    _this2.toggleAll = function () {\n      var selectAll = _this2.state.selectAll ? false : true;\n      var selection = [];\n\n      if (selectAll) {\n        var wrappedInstance = _this2.checkboxTable.getWrappedInstance();\n\n        var currentRecords = wrappedInstance.getResolvedState().sortedData;\n        currentRecords.forEach(function (item) {\n          selection.push(item._original._id);\n        });\n      }\n\n      _this2.setState({\n        selectAll: selectAll,\n        selection: selection\n      });\n    };\n\n    _this2.isSelected = function (key) {\n      return _this2.state.selection.includes(key);\n    };\n\n    _this2.logSelection = function () {\n      console.log(\"selection:\", _this2.state.selection);\n    };\n\n    return _this2;\n  }\n\n  _createClass(DataGrid, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      this.setState({\n        data: getData(this.props.data)\n      });\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this3 = this;\n\n      var toggleSelection = this.toggleSelection,\n          toggleAll = this.toggleAll,\n          isSelected = this.isSelected,\n          logSelection = this.logSelection;\n      var _this$state = this.state,\n          data = _this$state.data,\n          columns = _this$state.columns,\n          selectAll = _this$state.selectAll;\n      var checkboxProps = {\n        selectAll: selectAll,\n        isSelected: isSelected,\n        toggleSelection: toggleSelection,\n        toggleAll: toggleAll,\n        selectType: \"checkbox\" //   getTrProps: (s, r) => {\n        //     const selected = this.isSelected(r.original._id);\n        //     return {\n        //       style: {\n        //         backgroundColor: selected ? \"lightgreen\" : \"inherit\"\n        //       }\n        //     };\n        //   }\n\n      };\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 92\n        },\n        __self: this\n      }, React.createElement(Panel, {\n        bsStyle: \"primary\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 93\n        },\n        __self: this\n      }, React.createElement(Panel.Heading, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 94\n        },\n        __self: this\n      }, this.props.title), React.createElement(Panel.Body, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 97\n        },\n        __self: this\n      }, React.createElement(CheckboxTable, Object.assign({\n        className: \"-striped -highlight\",\n        defaultPageSize: 10,\n        ref: function ref(r) {\n          return _this3.checkboxTable = r;\n        },\n        data: this.state.data,\n        columns: this.props.columns\n      }, checkboxProps, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 98\n        },\n        __self: this\n      }))), React.createElement(Panel.Footer, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 107\n        },\n        __self: this\n      }, React.createElement(Button, {\n        onClick: this.props.clicked,\n        bsStyle: \"primary\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 108\n        },\n        __self: this\n      }, \"Save\"), React.createElement(Button, {\n        bsStyle: \"danger\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 109\n        },\n        __self: this\n      }, \"Delete\"))));\n    }\n  }]);\n\n  return DataGrid;\n}(Component);\n\nexport default DataGrid;","map":{"version":3,"sources":["C:\\Users\\issac\\Documents\\React\\simple-dashboard\\src\\components\\Table\\DataGrid\\DataGrid.js"],"names":["React","Component","Panel","Button","ReactTable","checkboxHOC","CheckboxTable","getData","data","dataWithId","map","item","_id","state","id","console","log","DataGrid","selection","selectAll","toggleSelection","key","shift","row","keyIndex","indexOf","slice","push","toggleAll","wrappedInstance","checkboxTable","getWrappedInstance","currentRecords","getResolvedState","sortedData","forEach","_original","setState","isSelected","includes","logSelection","props","columns","checkboxProps","selectType","title","r","clicked"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\r\n\r\nimport { Panel, Button } from 'react-bootstrap';\r\nimport ReactTable from 'react-table';\r\nimport checkboxHOC from \"react-table/lib/hoc/selectTable\";\r\n\r\nimport 'react-table/react-table.css';\r\n\r\nconst CheckboxTable = checkboxHOC(ReactTable);\r\n\r\nconst getData = (data) => {\r\n    const dataWithId = data.map(item => {\r\n        const _id = this.state.id;\r\n        console.log('id from getdata: ' + _id)\r\n        return{\r\n            _id,\r\n            ...item\r\n        }\r\n    });\r\n\r\n    return dataWithId;\r\n};\r\n\r\nclass DataGrid extends Component {\r\n    state = {\r\n        id: 0,\r\n        selection: [],\r\n        selectAll: false,\r\n        data: []\r\n    };\r\n\r\n    componentDidMount(){\r\n        this.setState({data: getData(this.props.data)});\r\n    }\r\n\r\n    toggleSelection = (key, shift, row) => {\r\n        let selection = [...this.state.selection];\r\n        const keyIndex = selection.indexOf(key);\r\n        const data = this.state.data;\r\n        if(keyIndex > 0) {\r\n            selection = [\r\n                ...selection.slice(0, keyIndex),\r\n                ...selection.slice(keyIndex + 1)\r\n            ]\r\n        }\r\n        else {\r\n            selection.push(key);\r\n        }\r\n    };\r\n\r\n    toggleAll = () => {\r\n        const selectAll = this.state.selectAll ? false : true;\r\n        const selection = [];\r\n        if (selectAll) {\r\n          const wrappedInstance = this.checkboxTable.getWrappedInstance();\r\n          const currentRecords = wrappedInstance.getResolvedState().sortedData;\r\n          currentRecords.forEach(item => {\r\n            selection.push(item._original._id);\r\n          });\r\n        }\r\n        this.setState({ selectAll, selection });\r\n      };\r\n\r\n      isSelected = key => {\r\n        return this.state.selection.includes(key);\r\n      };\r\n\r\n      logSelection = () => {\r\n        console.log(\"selection:\", this.state.selection);\r\n      };\r\n\r\n    render(){\r\n        const { toggleSelection, toggleAll, isSelected, logSelection } = this;\r\n        const { data, columns, selectAll } = this.state;\r\n        const checkboxProps = {\r\n          selectAll,\r\n          isSelected,\r\n          toggleSelection,\r\n          toggleAll,\r\n          selectType: \"checkbox\",\r\n        //   getTrProps: (s, r) => {\r\n        //     const selected = this.isSelected(r.original._id);\r\n        //     return {\r\n        //       style: {\r\n        //         backgroundColor: selected ? \"lightgreen\" : \"inherit\"\r\n        //       }\r\n        //     };\r\n        //   }\r\n        };\r\n\r\n        return(\r\n            <div>\r\n                <Panel bsStyle='primary'>\r\n                    <Panel.Heading>\r\n                        {this.props.title}\r\n                    </Panel.Heading>\r\n                    <Panel.Body>\r\n                      <CheckboxTable\r\n                          className=\"-striped -highlight\"\r\n                          defaultPageSize={10}\r\n                          ref={r => (this.checkboxTable = r)}\r\n                          data={this.state.data}\r\n                          columns={this.props.columns}\r\n                          {...checkboxProps}\r\n                      />\r\n                    </Panel.Body>\r\n                    <Panel.Footer>\r\n                        <Button onClick={this.props.clicked} bsStyle='primary'>Save</Button>\r\n                        <Button bsStyle='danger'>Delete</Button>\r\n                    </Panel.Footer>\r\n                </Panel>\r\n            </div>\r\n        )\r\n    };\r\n}\r\n\r\nexport default DataGrid;"]},"metadata":{},"sourceType":"module"}