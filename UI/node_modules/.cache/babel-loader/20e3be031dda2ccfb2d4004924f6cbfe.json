{"ast":null,"code":"import _toConsumableArray from \"C:\\\\Users\\\\issac\\\\Documents\\\\React\\\\e-dashboard\\\\e-dashboard\\\\UI\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/toConsumableArray\";\nexport var getTopFive = function getTopFive(data, key, value) {\n  var map = new Map();\n  data.forEach(function (x) {\n    if (map.has(x[key])) {\n      var val = map.get(x[key]) + x[value];\n      map.set(x[key], val);\n    } else {\n      map.set(x[key], x[value]);\n    }\n  });\n  return _toConsumableArray(map).map(function (x) {\n    var obj = {};\n    obj[key] = x[0];\n    obj[value] = x[1];\n    return obj;\n  }).sort(function (a, b) {\n    return b[value] - a[value];\n  });\n};","map":{"version":3,"sources":["C:\\Users\\issac\\Documents\\React\\e-dashboard\\e-dashboard\\UI\\src\\components\\Charts\\Utilities.js"],"names":["getTopFive","data","key","value","map","Map","forEach","x","has","val","get","set","obj","sort","a","b"],"mappings":";AAAA,OAAO,IAAMA,UAAU,GAAG,SAAbA,UAAa,CAACC,IAAD,EAAOC,GAAP,EAAYC,KAAZ,EAAsB;AAC5C,MAAIC,GAAG,GAAG,IAAIC,GAAJ,EAAV;AACAJ,EAAAA,IAAI,CAACK,OAAL,CAAa,UAAAC,CAAC,EAAI;AACd,QAAGH,GAAG,CAACI,GAAJ,CAAQD,CAAC,CAACL,GAAD,CAAT,CAAH,EAAmB;AACf,UAAMO,GAAG,GAAGL,GAAG,CAACM,GAAJ,CAAQH,CAAC,CAACL,GAAD,CAAT,IAAkBK,CAAC,CAACJ,KAAD,CAA/B;AACAC,MAAAA,GAAG,CAACO,GAAJ,CAAQJ,CAAC,CAACL,GAAD,CAAT,EAAgBO,GAAhB;AACH,KAHD,MAII;AACAL,MAAAA,GAAG,CAACO,GAAJ,CAAQJ,CAAC,CAACL,GAAD,CAAT,EAAgBK,CAAC,CAACJ,KAAD,CAAjB;AACH;AACJ,GARD;AASA,SAAO,mBAAIC,GAAJ,EAASA,GAAT,CAAa,UAAAG,CAAC,EAAI;AACrB,QAAIK,GAAG,GAAG,EAAV;AACAA,IAAAA,GAAG,CAACV,GAAD,CAAH,GAAWK,CAAC,CAAC,CAAD,CAAZ;AACAK,IAAAA,GAAG,CAACT,KAAD,CAAH,GAAaI,CAAC,CAAC,CAAD,CAAd;AACA,WAAOK,GAAP;AACH,GALM,EAMNC,IANM,CAMD,UAACC,CAAD,EAAIC,CAAJ,EAAU;AACX,WAAOA,CAAC,CAACZ,KAAD,CAAD,GAAWW,CAAC,CAACX,KAAD,CAAnB;AACJ,GARM,CAAP;AASH,CApBM","sourcesContent":["export const getTopFive = (data, key, value) => {\r\n    let map = new Map();\r\n    data.forEach(x => {\r\n        if(map.has(x[key])){\r\n            const val = map.get(x[key]) + x[value];\r\n            map.set(x[key], val);\r\n        }\r\n        else{\r\n            map.set(x[key], x[value]);\r\n        }\r\n    });\r\n    return [...map].map(x => {\r\n        let obj = {};       \r\n        obj[key] = x[0];\r\n        obj[value] = x[1];\r\n        return obj;\r\n    })\r\n    .sort((a, b) => {\r\n         return b[value] - a[value]\r\n    });\r\n}"]},"metadata":{},"sourceType":"module"}