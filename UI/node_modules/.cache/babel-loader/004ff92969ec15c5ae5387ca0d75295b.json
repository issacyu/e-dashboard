{"ast":null,"code":"import _toConsumableArray from \"C:\\\\Users\\\\issac\\\\Documents\\\\React\\\\e-dashboard\\\\e-dashboard\\\\UI\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/toConsumableArray\";\nimport _classCallCheck from \"C:\\\\Users\\\\issac\\\\Documents\\\\React\\\\e-dashboard\\\\e-dashboard\\\\UI\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"C:\\\\Users\\\\issac\\\\Documents\\\\React\\\\e-dashboard\\\\e-dashboard\\\\UI\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"C:\\\\Users\\\\issac\\\\Documents\\\\React\\\\e-dashboard\\\\e-dashboard\\\\UI\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"C:\\\\Users\\\\issac\\\\Documents\\\\React\\\\e-dashboard\\\\e-dashboard\\\\UI\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"C:\\\\Users\\\\issac\\\\Documents\\\\React\\\\e-dashboard\\\\e-dashboard\\\\UI\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"C:\\\\Users\\\\issac\\\\Documents\\\\React\\\\e-dashboard\\\\e-dashboard\\\\UI\\\\src\\\\hoc\\\\WithGridFunction\\\\WithGridFunction.js\";\nimport React, { Component } from 'react';\nimport Chance from \"chance\"; //const chance = new Chance();\n\nvar withGridFunction = function withGridFunction(WrappedComponent) {\n  var _temp;\n\n  return _temp =\n  /*#__PURE__*/\n  function (_Component) {\n    _inherits(_temp, _Component);\n\n    function _temp() {\n      var _getPrototypeOf2;\n\n      var _this;\n\n      _classCallCheck(this, _temp);\n\n      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n        args[_key] = arguments[_key];\n      }\n\n      _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(_temp)).call.apply(_getPrototypeOf2, [this].concat(args)));\n      _this.state = {\n        id: 0,\n        selection: [],\n        selectAll: false,\n        data: [],\n        disableDeleteButton: true\n      };\n\n      _this.setData = function (data) {\n        // Each data must contains an id \n        // in order to show a checkbox.\n        _this.setState({\n          data: data\n        });\n      };\n\n      _this.toggleSelection = function (key, shift, row) {\n        var selection = _toConsumableArray(_this.state.selection);\n\n        var keyIndex = selection.indexOf(key);\n\n        if (keyIndex >= 0) {\n          selection = [].concat(_toConsumableArray(selection.slice(0, keyIndex)), _toConsumableArray(selection.slice(keyIndex + 1)));\n        } else {\n          selection.push(key);\n        }\n\n        _this.setState({\n          selection: selection,\n          disableDeleteButton: selection.length === 0\n        });\n      };\n\n      _this.toggleAll = function () {\n        var selectAll = _this.state.selectAll ? false : true;\n        var selection = [];\n\n        if (selectAll) {\n          var wrappedInstance = _this.checkboxTable.getWrappedInstance();\n\n          var currentRecords = wrappedInstance.getResolvedState().sortedData;\n          currentRecords.forEach(function (item) {\n            selection.push(item._original._id);\n          });\n        }\n\n        _this.setState({\n          selectAll: selectAll,\n          selection: selection,\n          disableDeleteButton: selection.length === 0\n        });\n      };\n\n      _this.isSelected = function (key) {\n        return _this.state.selection.includes(key);\n      };\n\n      _this.onDeleteRowHandler = function () {\n        var dataClone = _toConsumableArray(_this.state.data);\n\n        var newData = dataClone.filter(function (r) {\n          return !_this.state.selection.includes(r.id);\n        });\n\n        _this.setState({\n          data: _toConsumableArray(newData)\n        });\n      };\n\n      return _this;\n    }\n\n    _createClass(_temp, [{\n      key: \"render\",\n      value: function render() {\n        var toggleSelection = this.toggleSelection,\n            toggleAll = this.toggleAll,\n            isSelected = this.isSelected;\n        var _this$state = this.state,\n            data = _this$state.data,\n            selectAll = _this$state.selectAll;\n        var checkboxProps = {\n          selectAll: selectAll,\n          isSelected: isSelected,\n          toggleSelection: toggleSelection,\n          toggleAll: toggleAll,\n          selectType: \"checkbox\"\n        };\n        return React.createElement(\"div\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 81\n          },\n          __self: this\n        }, React.createElement(WrappedComponent, Object.assign({\n          setData: this.setData,\n          checkboxProps: checkboxProps,\n          onDeleteRowHandler: this.onDeleteRowHandler\n        }, this.state, this.props, {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 82\n          },\n          __self: this\n        })));\n      }\n    }]);\n\n    return _temp;\n  }(Component), _temp;\n};\n\nexport default withGridFunction;","map":{"version":3,"sources":["C:\\Users\\issac\\Documents\\React\\e-dashboard\\e-dashboard\\UI\\src\\hoc\\WithGridFunction\\WithGridFunction.js"],"names":["React","Component","Chance","withGridFunction","WrappedComponent","state","id","selection","selectAll","data","disableDeleteButton","setData","setState","toggleSelection","key","shift","row","keyIndex","indexOf","slice","push","length","toggleAll","wrappedInstance","checkboxTable","getWrappedInstance","currentRecords","getResolvedState","sortedData","forEach","item","_original","_id","isSelected","includes","onDeleteRowHandler","dataClone","newData","filter","r","checkboxProps","selectType","props"],"mappings":"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","sourcesContent":["import React, {Component} from 'react';\r\n\r\nimport Chance from \"chance\";\r\n\r\n//const chance = new Chance();\r\n\r\nconst withGridFunction = (WrappedComponent) => {\r\n    return class extends Component{\r\n        state = {\r\n            id: 0,\r\n            selection: [],\r\n            selectAll: false,\r\n            data: [],\r\n            disableDeleteButton: true\r\n        }\r\n\r\n        setData = (data) => {\r\n            // Each data must contains an id \r\n            // in order to show a checkbox.\r\n            this.setState({data: data});\r\n        };\r\n\r\n        toggleSelection = (key, shift, row) => {\r\n            let selection = [...this.state.selection];\r\n            const keyIndex = selection.indexOf(key);\r\n            if(keyIndex >= 0) {\r\n                selection = [\r\n                    ...selection.slice(0, keyIndex),\r\n                    ...selection.slice(keyIndex + 1)\r\n                ]\r\n            }\r\n            else {\r\n                selection.push(key);\r\n            }\r\n    \r\n            this.setState({\r\n                selection,\r\n                disableDeleteButton: selection.length === 0\r\n            })\r\n        };\r\n\r\n        toggleAll = () => {\r\n            const selectAll = this.state.selectAll ? false : true;\r\n            const selection = [];\r\n            if (selectAll) {\r\n              const wrappedInstance = this.checkboxTable.getWrappedInstance();\r\n              const currentRecords = wrappedInstance.getResolvedState().sortedData;\r\n              currentRecords.forEach(item => {\r\n                selection.push(item._original._id);\r\n              });\r\n            }\r\n            this.setState({ \r\n                selectAll, \r\n                selection,\r\n                disableDeleteButton: selection.length === 0\r\n            });\r\n          };\r\n\r\n        isSelected = key => {\r\n            return this.state.selection.includes(key);\r\n        };\r\n\r\n        onDeleteRowHandler = () => {\r\n            const dataClone = [...this.state.data];\r\n            const newData = dataClone.filter(r => !this.state.selection.includes(r.id));\r\n            this.setState({data: [...newData]});\r\n        };\r\n\r\n        render(){\r\n            const { toggleSelection, toggleAll, isSelected } = this;\r\n            const { data, selectAll } = this.state;\r\n            const checkboxProps = {\r\n              selectAll,\r\n              isSelected,\r\n              toggleSelection,\r\n              toggleAll,\r\n              selectType: \"checkbox\",\r\n            };\r\n\r\n            return(\r\n                <div>\r\n                    <WrappedComponent \r\n                        setData={this.setData} \r\n                        checkboxProps ={checkboxProps}\r\n                        onDeleteRowHandler={this.onDeleteRowHandler}\r\n                        {...this.state}\r\n                        {...this.props} \r\n                    />\r\n                </div>\r\n            );\r\n        }\r\n    }\r\n}\r\n\r\nexport default withGridFunction;"]},"metadata":{},"sourceType":"module"}