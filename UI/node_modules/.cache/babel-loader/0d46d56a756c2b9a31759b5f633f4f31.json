{"ast":null,"code":"import _defineProperty from \"C:\\\\Users\\\\issac\\\\Documents\\\\React\\\\e-dashboard\\\\e-dashboard\\\\UI\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/defineProperty\";\nimport _toConsumableArray from \"C:\\\\Users\\\\issac\\\\Documents\\\\React\\\\e-dashboard\\\\e-dashboard\\\\UI\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/toConsumableArray\";\nimport _classCallCheck from \"C:\\\\Users\\\\issac\\\\Documents\\\\React\\\\e-dashboard\\\\e-dashboard\\\\UI\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"C:\\\\Users\\\\issac\\\\Documents\\\\React\\\\e-dashboard\\\\e-dashboard\\\\UI\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"C:\\\\Users\\\\issac\\\\Documents\\\\React\\\\e-dashboard\\\\e-dashboard\\\\UI\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"C:\\\\Users\\\\issac\\\\Documents\\\\React\\\\e-dashboard\\\\e-dashboard\\\\UI\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"C:\\\\Users\\\\issac\\\\Documents\\\\React\\\\e-dashboard\\\\e-dashboard\\\\UI\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"C:\\\\Users\\\\issac\\\\Documents\\\\React\\\\e-dashboard\\\\e-dashboard\\\\UI\\\\src\\\\containers\\\\Sale\\\\Sale.js\";\nimport React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport * as JsonPatch from 'fast-json-patch';\nimport * as actions from '../../store/actions/sale';\nimport { Row, Col, Panel } from 'react-bootstrap';\nimport BarChart from '../../components/Charts/BarChart';\nimport LineChart from '../../components/Charts/LineChart';\nimport PieChart from '../../components/Charts/PieChart';\nimport DataGrid from '../../components/Table/DataGrid/DataGrid';\nimport * as GridColumns from '../../components/Table/GridColumns/GridColumns';\nimport WithGridFunction from '../../hoc/WithGridFunction/WithGridFunction';\nimport EmptyRow from '../../components/Table/GridRows/GridRow';\nimport * as Utility from '../../components/Charts/Utilities';\nimport SalePanelGroup from '../../components/Panel/SalePanelGroup';\nimport Modal from '../../components/Modal/Modal';\n\nvar Sale =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(Sale, _Component);\n\n  function Sale() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, Sale);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(Sale)).call.apply(_getPrototypeOf2, [this].concat(args)));\n    _this.state = {\n      salesData: [],\n      origSalesData: [],\n      topFiveProduct: [],\n      completeVsReturn: [],\n      saleAndProfit: [],\n      showModal: false,\n      mockData: [{\n        product: 'iPhone Xs',\n        quantity: 10,\n        price: 1300,\n        category: 'electronic',\n        model: '128gb',\n        type: '',\n        color: 'gold',\n        condition: 'new',\n        manufacturer: 'Apple',\n        cost: 1200,\n        totalCost: 1200\n      }, {\n        product: 'iPhone Xs',\n        quantity: 5,\n        price: 1300,\n        category: 'electronic',\n        model: '128gb',\n        type: '',\n        color: 'gold',\n        condition: 'new',\n        manufacturer: 'Apple',\n        cost: 1200,\n        totalCost: 1200\n      }, {\n        product: 'Samsung Galaxy Note 10',\n        quantity: 5,\n        price: 799,\n        category: 'electronic',\n        model: '128gb',\n        type: '',\n        color: 'Black',\n        condition: 'new',\n        manufacturer: 'Samsung',\n        cost: 500,\n        totalCost: 560\n      }, {\n        product: 'LED Bulb',\n        quantity: 1000,\n        price: 9.99,\n        category: 'home',\n        model: '100 Watt',\n        type: 'LED',\n        color: 'Warm White',\n        condition: 'new',\n        manufacturer: 'Mr.LED',\n        cost: 500,\n        totalCost: 700\n      }]\n    };\n\n    _this.onSalesRenderEditableCellHandler = function (cellInfo) {\n      // Avoid exception! We don't want to modify an empty array.\n      if (_this.state.salesData.length !== 0) {\n        return React.createElement(\"div\", {\n          style: {\n            backgroundColor: \"#fafafa\"\n          },\n          contentEditable: true,\n          suppressContentEditableWarning: true,\n          onBlur: function onBlur(e) {\n            var data = _toConsumableArray(_this.state.salesData);\n\n            data[cellInfo.index][cellInfo.column.id] = e.target.innerHTML;\n\n            _this.setState({\n              salesData: data\n            });\n          },\n          dangerouslySetInnerHTML: {\n            __html: _this.state.salesData[cellInfo.index][cellInfo.column.id]\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 117\n          },\n          __self: this\n        });\n      }\n    };\n\n    _this.onSaveSaleHandler = function () {\n      var patchDoc = JsonPatch.compare(_this.state.origSalesData, _this.state.salesData);\n\n      _this.props.onSaveSaleData(patchDoc, _this.state.salesData);\n\n      _this.setState({\n        origSalesData: JSON.parse(JSON.stringify(_this.state.salesData))\n      });\n\n      if (_this.props.error === '') {\n        _this.props.toggleModal('Success', 'Sales are saved successfully.', 'success');\n      } else {\n        _this.props.toggleModal('Fail', 'Sales cannot be saved. ' + _this.props.error, 'danger');\n      }\n    };\n\n    return _this;\n  }\n\n  _createClass(Sale, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      this.props.onFetchSaleData();\n    }\n  }, {\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate(prevProps) {\n      // For the initial load.\n      if (this.props.saleData !== prevProps.saleData) {\n        var gridData = this.props.saleData;\n        this.setState({\n          salesData: JSON.parse(JSON.stringify(gridData)),\n          origSalesData: JSON.parse(JSON.stringify(gridData))\n        }); // Assign data to HOC state.\n\n        this.props.setData(gridData);\n        this.setState({\n          topFiveProduct: Utility.getTopFive(gridData, 'product', 'quantity'),\n          completeVsReturn: Utility.getCompleteVsReturn(gridData),\n          saleAndProfit: this.props.saleProfitByDate\n        });\n      } // When add or remove data from grid, we want to assign new data to the state.\n      // The this.props.data is from HOC.\n\n\n      if (this.props.data !== prevProps.data) {\n        this.setState({\n          salesData: JSON.parse(JSON.stringify(this.props.data))\n        });\n      }\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 148\n        },\n        __self: this\n      }, React.createElement(SalePanelGroup, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 149\n        },\n        __self: this\n      }), React.createElement(Row, {\n        className: \"show-grid\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 150\n        },\n        __self: this\n      }, React.createElement(Col, {\n        md: 12,\n        lg: 12,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 151\n        },\n        __self: this\n      }, React.createElement(LineChart, {\n        data: this.state.saleAndProfit,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 152\n        },\n        __self: this\n      }))), React.createElement(Row, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 157\n        },\n        __self: this\n      }, React.createElement(Col, {\n        md: 12,\n        lg: 4,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 158\n        },\n        __self: this\n      }, React.createElement(BarChart, {\n        title: \"Top 5 Selling Products\",\n        width: 600,\n        height: 300,\n        data: this.state.topFiveProduct,\n        displayKey: \"product\",\n        displayValue: \"quantity\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 159\n        },\n        __self: this\n      })), React.createElement(Col, {\n        md: 12,\n        lg: 4,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 168\n        },\n        __self: this\n      }, React.createElement(PieChart, {\n        title: \"Profit vs Cost\",\n        displayData: this.state.mockData,\n        displayKey: \"product\",\n        displayValue: \"totalCost\",\n        width: 800,\n        height: 300,\n        cx: 220,\n        cy: 100,\n        outerRadius: 130,\n        fill: \"#8884d8\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 169\n        },\n        __self: this\n      })), React.createElement(Col, {\n        md: 12,\n        lg: 4,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 182\n        },\n        __self: this\n      }, React.createElement(PieChart, {\n        title: \"Complete Order vs Return Order\",\n        displayData: this.state.completeVsReturn,\n        displayKey: \"Status\",\n        displayValue: \"Number\",\n        width: 800,\n        height: 300,\n        cx: 220,\n        cy: 100,\n        outerRadius: 130,\n        fill: \"#8884d8\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 183\n        },\n        __self: this\n      }))), React.createElement(Row, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 197\n        },\n        __self: this\n      }, React.createElement(Col, {\n        md: 12,\n        lg: 12,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 198\n        },\n        __self: this\n      }, React.createElement(DataGrid //The key uses to notify the child component to re-render.\n      , {\n        key: this.state.salesData,\n        data: this.state.salesData,\n        emptyRow: EmptyRow(),\n        columns: GridColumns.SALES_COLUMNS(this.onSalesRenderEditableCellHandler),\n        onSaveHandler: this.onSaveSaleHandler,\n        checkboxProps: this.props.checkboxProps,\n        disableDeleteButton: this.props.disableDeleteButton,\n        onDeleteRowHandler: this.props.onDeleteRowHandler,\n        onAddRowHandler: this.props.onAddRowHandler,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 199\n        },\n        __self: this\n      }))));\n    }\n  }]);\n\n  return Sale;\n}(Component);\n\nvar mapStateToProps = function mapStateToProps(state) {\n  var _ref;\n\n  console.log(state.sale.saleData);\n  return _ref = {\n    saleData: state.sale.saleData,\n    saleProfitByDate: state.sale.saleProfitByDate\n  }, _defineProperty(_ref, \"saleProfitByDate\", state.sale.saleProfitByDate), _defineProperty(_ref, \"completedReturnedRatio\", state.sale.completedReturnedRatio), _defineProperty(_ref, \"loading\", state.sale.loading), _defineProperty(_ref, \"error\", state.sale.error), _ref;\n};\n\nvar mapDispatchToProps = function mapDispatchToProps(dispatch) {\n  return {\n    onFetchSaleData: function onFetchSaleData() {\n      return dispatch(actions.fetchSaleData());\n    },\n    onSaveSaleData: function onSaveSaleData(patchDoc, salesData) {\n      return dispatch(actions.saveSaleData(patchDoc, salesData));\n    }\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(WithGridFunction(Sale));","map":{"version":3,"sources":["C:\\Users\\issac\\Documents\\React\\e-dashboard\\e-dashboard\\UI\\src\\containers\\Sale\\Sale.js"],"names":["React","Component","connect","JsonPatch","actions","Row","Col","Panel","BarChart","LineChart","PieChart","DataGrid","GridColumns","WithGridFunction","EmptyRow","Utility","SalePanelGroup","Modal","Sale","state","salesData","origSalesData","topFiveProduct","completeVsReturn","saleAndProfit","showModal","mockData","product","quantity","price","category","model","type","color","condition","manufacturer","cost","totalCost","onSalesRenderEditableCellHandler","cellInfo","length","backgroundColor","e","data","index","column","id","target","innerHTML","setState","__html","onSaveSaleHandler","patchDoc","compare","props","onSaveSaleData","JSON","parse","stringify","error","toggleModal","onFetchSaleData","prevProps","saleData","gridData","setData","getTopFive","getCompleteVsReturn","saleProfitByDate","SALES_COLUMNS","checkboxProps","disableDeleteButton","onDeleteRowHandler","onAddRowHandler","mapStateToProps","console","log","sale","completedReturnedRatio","loading","mapDispatchToProps","dispatch","fetchSaleData","saveSaleData"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport * as JsonPatch from 'fast-json-patch';\r\nimport * as actions from '../../store/actions/sale'\r\nimport { Row, Col, Panel } from 'react-bootstrap';\r\n\r\nimport BarChart from '../../components/Charts/BarChart';\r\nimport LineChart from '../../components/Charts/LineChart';\r\nimport PieChart from '../../components/Charts/PieChart';\r\nimport DataGrid from '../../components/Table/DataGrid/DataGrid';\r\nimport * as GridColumns from '../../components/Table/GridColumns/GridColumns';\r\nimport WithGridFunction from '../../hoc/WithGridFunction/WithGridFunction';\r\nimport EmptyRow from '../../components/Table/GridRows/GridRow';\r\nimport * as Utility from '../../components/Charts/Utilities';\r\nimport SalePanelGroup from '../../components/Panel/SalePanelGroup';\r\nimport Modal from '../../components/Modal/Modal';\r\n\r\nclass Sale extends Component {\r\n\r\n    state = {\r\n        salesData: [],\r\n        origSalesData: [],\r\n        topFiveProduct: [],\r\n        completeVsReturn: [],\r\n        saleAndProfit: [],\r\n        showModal: false,\r\n        mockData: \r\n        [\r\n            {\r\n                product: 'iPhone Xs',\r\n                quantity: 10,\r\n                price: 1300,\r\n                category: 'electronic',\r\n                model: '128gb',\r\n                type: '',\r\n                color: 'gold',\r\n                condition: 'new',\r\n                manufacturer: 'Apple',\r\n                cost: 1200,\r\n                totalCost: 1200\r\n            },\r\n            {\r\n                product: 'iPhone Xs',\r\n                quantity: 5,\r\n                price: 1300,\r\n                category: 'electronic',\r\n                model: '128gb',\r\n                type: '',\r\n                color: 'gold',\r\n                condition: 'new',\r\n                manufacturer: 'Apple',\r\n                cost: 1200,\r\n                totalCost: 1200\r\n            },\r\n            {\r\n                product: 'Samsung Galaxy Note 10',\r\n                quantity: 5,\r\n                price: 799,\r\n                category: 'electronic',\r\n                model: '128gb',\r\n                type: '',\r\n                color: 'Black',\r\n                condition: 'new',\r\n                manufacturer: 'Samsung',\r\n                cost: 500,\r\n                totalCost: 560\r\n            },\r\n            {\r\n                product: 'LED Bulb',\r\n                quantity: 1000,\r\n                price: 9.99,\r\n                category: 'home',\r\n                model: '100 Watt',\r\n                type: 'LED',\r\n                color: 'Warm White',\r\n                condition: 'new',\r\n                manufacturer: 'Mr.LED',\r\n                cost: 500,\r\n                totalCost: 700\r\n            },\r\n        ]\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.props.onFetchSaleData();\r\n    }\r\n\r\n    componentDidUpdate(prevProps) {\r\n        // For the initial load.\r\n        if(this.props.saleData !== prevProps.saleData) {\r\n            const gridData = this.props.saleData;\r\n            this.setState({\r\n                salesData: JSON.parse(JSON.stringify(gridData)),\r\n                origSalesData: JSON.parse(JSON.stringify(gridData))\r\n            })\r\n            // Assign data to HOC state.\r\n            this.props.setData(gridData);\r\n            this.setState({\r\n                topFiveProduct: Utility.getTopFive(gridData, 'product', 'quantity'),\r\n                completeVsReturn: Utility.getCompleteVsReturn(gridData),\r\n                saleAndProfit: this.props.saleProfitByDate\r\n            });\r\n        }\r\n        // When add or remove data from grid, we want to assign new data to the state.\r\n        // The this.props.data is from HOC.\r\n        if(this.props.data !== prevProps.data){\r\n            this.setState({\r\n                salesData: JSON.parse(JSON.stringify(this.props.data))\r\n            })\r\n        }\r\n    }\r\n\r\n    onSalesRenderEditableCellHandler = (cellInfo) => {\r\n        // Avoid exception! We don't want to modify an empty array.\r\n        if(this.state.salesData.length !== 0) {\r\n            return (\r\n                <div\r\n                    style={{ backgroundColor: \"#fafafa\" }}\r\n                    contentEditable\r\n                    suppressContentEditableWarning\r\n                    onBlur={e => {\r\n                        const data = [...this.state.salesData];\r\n                        data[cellInfo.index][cellInfo.column.id] = e.target.innerHTML;\r\n                        this.setState({salesData: data});\r\n                    }}\r\n                    dangerouslySetInnerHTML={{\r\n                        __html: this.state.salesData[cellInfo.index][cellInfo.column.id]\r\n                    }}\r\n                />\r\n            );\r\n        }\r\n    }\r\n\r\n    onSaveSaleHandler = () => {\r\n        const patchDoc = JsonPatch.compare(this.state.origSalesData, this.state.salesData);\r\n        this.props.onSaveSaleData(patchDoc, this.state.salesData);\r\n        this.setState({origSalesData: JSON.parse(JSON.stringify(this.state.salesData))});\r\n        if(this.props.error === ''){\r\n            this.props.toggleModal('Success', 'Sales are saved successfully.', 'success');\r\n        }  \r\n        else{\r\n            this.props.toggleModal('Fail', 'Sales cannot be saved. ' + this.props.error, 'danger');\r\n        }      \r\n    }\r\n\r\n    render(){\r\n        return(\r\n            <div>\r\n                <SalePanelGroup />\r\n                <Row className=\"show-grid\">\r\n                    <Col md={12} lg={12}>\r\n                        <LineChart \r\n                            data={this.state.saleAndProfit}\r\n                        />\r\n                    </Col>\r\n                </Row>\r\n                <Row>\r\n                    <Col md={12} lg={4}>\r\n                        <BarChart \r\n                            title='Top 5 Selling Products'\r\n                            width={600}\r\n                            height={300}\r\n                            data={this.state.topFiveProduct}\r\n                            displayKey='product'\r\n                            displayValue='quantity'\r\n                        />\r\n                    </Col>\r\n                    <Col md={12} lg={4}>\r\n                        <PieChart \r\n                            title='Profit vs Cost'\r\n                            displayData={this.state.mockData}\r\n                            displayKey='product'\r\n                            displayValue='totalCost'\r\n                            width={800}\r\n                            height={300}\r\n                            cx={220}\r\n                            cy={100}\r\n                            outerRadius={130}\r\n                            fill='#8884d8'\r\n                        />\r\n                    </Col>\r\n                    <Col md={12} lg={4}>\r\n                        <PieChart \r\n                            title='Complete Order vs Return Order'\r\n                            displayData={this.state.completeVsReturn}\r\n                            displayKey='Status'\r\n                            displayValue='Number'\r\n                            width={800}\r\n                            height={300}\r\n                            cx={220}\r\n                            cy={100}\r\n                            outerRadius={130}\r\n                            fill='#8884d8'\r\n                        />\r\n                    </Col>\r\n                </Row>\r\n                <Row>\r\n                    <Col md={12} lg={12}>\r\n                        <DataGrid \r\n                            //The key uses to notify the child component to re-render.\r\n                            key={this.state.salesData}\r\n                            data={this.state.salesData}\r\n                            emptyRow={EmptyRow()}\r\n                            columns={GridColumns.SALES_COLUMNS(this.onSalesRenderEditableCellHandler)}\r\n                            onSaveHandler={this.onSaveSaleHandler}\r\n                            checkboxProps={this.props.checkboxProps}\r\n                            disableDeleteButton={this.props.disableDeleteButton}\r\n                            onDeleteRowHandler={this.props.onDeleteRowHandler}\r\n                            onAddRowHandler={this.props.onAddRowHandler}\r\n                        />\r\n                    </Col>\r\n                </Row>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n    console.log(state.sale.saleData);\r\n    return {\r\n        saleData: state.sale.saleData,\r\n        saleProfitByDate: state.sale.saleProfitByDate,\r\n        saleProfitByDate: state.sale.saleProfitByDate,\r\n        completedReturnedRatio: state.sale.completedReturnedRatio,\r\n        loading: state.sale.loading,\r\n        error: state.sale.error\r\n    }\r\n};\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n    return {\r\n        onFetchSaleData: () => dispatch(actions.fetchSaleData()),\r\n        onSaveSaleData: (patchDoc, salesData) => dispatch(actions.saveSaleData(patchDoc, salesData))\r\n    };\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(WithGridFunction(Sale));"]},"metadata":{},"sourceType":"module"}